=begin
#Salesflare API

## Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

The version of the OpenAPI document: 1.0.0
Contact: support@salesflare.com
Generated by: https://openapi-generator.tech
Generator version: 7.6.0

=end

require 'date'
require 'time'

module OpenapiClient
  class GetMe200Response
    attr_accessor :id

    attr_accessor :team

    attr_accessor :group

    attr_accessor :amount_of_trial_days_earned

    attr_accessor :has_received_account_suggestions

    attr_accessor :has_archived_contacts

    attr_accessor :notification_channel_id

    attr_accessor :needs_password

    attr_accessor :disabled

    attr_accessor :creation_date

    attr_accessor :modification_date

    attr_accessor :prefix

    attr_accessor :firstname

    attr_accessor :middle

    attr_accessor :lastname

    attr_accessor :suffix

    attr_accessor :name

    attr_accessor :email

    attr_accessor :domain

    attr_accessor :picture

    attr_accessor :type

    attr_accessor :is_admin

    attr_accessor :credit_usage

    attr_accessor :is_importing

    attr_accessor :sync_status

    attr_accessor :calendar_sync_status

    attr_accessor :first_calendar_sync_done

    attr_accessor :trial_expired

    attr_accessor :trial_expiry_date

    attr_accessor :trial_extended

    attr_accessor :restricted

    attr_accessor :restricted_reason

    attr_accessor :team_discount_code

    attr_accessor :referral_code

    attr_accessor :referral_reward

    attr_accessor :is_delinquent

    attr_accessor :social_profiles

    attr_accessor :phone_numbers

    attr_accessor :positions

    attr_accessor :addresses

    attr_accessor :tags

    attr_accessor :intercom_hash

    attr_accessor :first_day_of_week

    attr_accessor :am_pm_notation

    attr_accessor :auto_find_email_linkedin

    attr_accessor :data_sources_to_reconnect

    attr_accessor :data_sources

    attr_accessor :plan_flags

    attr_accessor :flags

    attr_accessor :role

    attr_accessor :call_log_sync_date

    attr_accessor :two_fa_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'team' => :'team',
        :'group' => :'group',
        :'amount_of_trial_days_earned' => :'amount_of_trial_days_earned',
        :'has_received_account_suggestions' => :'has_received_account_suggestions',
        :'has_archived_contacts' => :'has_archived_contacts',
        :'notification_channel_id' => :'notification_channel_id',
        :'needs_password' => :'needs_password',
        :'disabled' => :'disabled',
        :'creation_date' => :'creation_date',
        :'modification_date' => :'modification_date',
        :'prefix' => :'prefix',
        :'firstname' => :'firstname',
        :'middle' => :'middle',
        :'lastname' => :'lastname',
        :'suffix' => :'suffix',
        :'name' => :'name',
        :'email' => :'email',
        :'domain' => :'domain',
        :'picture' => :'picture',
        :'type' => :'type',
        :'is_admin' => :'is_admin',
        :'credit_usage' => :'credit_usage',
        :'is_importing' => :'is_importing',
        :'sync_status' => :'sync_status',
        :'calendar_sync_status' => :'calendar_sync_status',
        :'first_calendar_sync_done' => :'first_calendar_sync_done',
        :'trial_expired' => :'trial_expired',
        :'trial_expiry_date' => :'trial_expiry_date',
        :'trial_extended' => :'trial_extended',
        :'restricted' => :'restricted',
        :'restricted_reason' => :'restricted_reason',
        :'team_discount_code' => :'team_discount_code',
        :'referral_code' => :'referral_code',
        :'referral_reward' => :'referral_reward',
        :'is_delinquent' => :'is_delinquent',
        :'social_profiles' => :'social_profiles',
        :'phone_numbers' => :'phone_numbers',
        :'positions' => :'positions',
        :'addresses' => :'addresses',
        :'tags' => :'tags',
        :'intercom_hash' => :'intercom_hash',
        :'first_day_of_week' => :'first_day_of_week',
        :'am_pm_notation' => :'am_pm_notation',
        :'auto_find_email_linkedin' => :'auto_find_email_linkedin',
        :'data_sources_to_reconnect' => :'data_sources_to_reconnect',
        :'data_sources' => :'data_sources',
        :'plan_flags' => :'plan_flags',
        :'flags' => :'flags',
        :'role' => :'role',
        :'call_log_sync_date' => :'call_log_sync_date',
        :'two_fa_enabled' => :'two_fa_enabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Float',
        :'team' => :'GetMe200ResponseTeam',
        :'group' => :'Float',
        :'amount_of_trial_days_earned' => :'Float',
        :'has_received_account_suggestions' => :'Boolean',
        :'has_archived_contacts' => :'Boolean',
        :'notification_channel_id' => :'String',
        :'needs_password' => :'Boolean',
        :'disabled' => :'Boolean',
        :'creation_date' => :'Time',
        :'modification_date' => :'Time',
        :'prefix' => :'String',
        :'firstname' => :'String',
        :'middle' => :'String',
        :'lastname' => :'String',
        :'suffix' => :'String',
        :'name' => :'String',
        :'email' => :'String',
        :'domain' => :'String',
        :'picture' => :'String',
        :'type' => :'String',
        :'is_admin' => :'Boolean',
        :'credit_usage' => :'Float',
        :'is_importing' => :'Boolean',
        :'sync_status' => :'String',
        :'calendar_sync_status' => :'String',
        :'first_calendar_sync_done' => :'Boolean',
        :'trial_expired' => :'Boolean',
        :'trial_expiry_date' => :'Time',
        :'trial_extended' => :'Boolean',
        :'restricted' => :'Boolean',
        :'restricted_reason' => :'String',
        :'team_discount_code' => :'String',
        :'referral_code' => :'String',
        :'referral_reward' => :'Float',
        :'is_delinquent' => :'Boolean',
        :'social_profiles' => :'Array<GetMe200ResponseSocialProfilesInner>',
        :'phone_numbers' => :'Array<GetMe200ResponsePhoneNumbersInner>',
        :'positions' => :'Array<GetContacts200ResponseInnerPositionsInner>',
        :'addresses' => :'Array<Object>',
        :'tags' => :'Array<Object>',
        :'intercom_hash' => :'String',
        :'first_day_of_week' => :'Float',
        :'am_pm_notation' => :'Boolean',
        :'auto_find_email_linkedin' => :'Boolean',
        :'data_sources_to_reconnect' => :'Array<GetMe200ResponseDataSourcesToReconnectInner>',
        :'data_sources' => :'Array<GetMe200ResponseDataSourcesInner>',
        :'plan_flags' => :'Object',
        :'flags' => :'Array<GetMe200ResponseFlagsInner>',
        :'role' => :'GetMe200ResponseRole',
        :'call_log_sync_date' => :'Time',
        :'two_fa_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetMe200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetMe200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'group')
        self.group = attributes[:'group']
      end

      if attributes.key?(:'amount_of_trial_days_earned')
        self.amount_of_trial_days_earned = attributes[:'amount_of_trial_days_earned']
      end

      if attributes.key?(:'has_received_account_suggestions')
        self.has_received_account_suggestions = attributes[:'has_received_account_suggestions']
      end

      if attributes.key?(:'has_archived_contacts')
        self.has_archived_contacts = attributes[:'has_archived_contacts']
      end

      if attributes.key?(:'notification_channel_id')
        self.notification_channel_id = attributes[:'notification_channel_id']
      end

      if attributes.key?(:'needs_password')
        self.needs_password = attributes[:'needs_password']
      end

      if attributes.key?(:'disabled')
        self.disabled = attributes[:'disabled']
      end

      if attributes.key?(:'creation_date')
        self.creation_date = attributes[:'creation_date']
      end

      if attributes.key?(:'modification_date')
        self.modification_date = attributes[:'modification_date']
      end

      if attributes.key?(:'prefix')
        self.prefix = attributes[:'prefix']
      end

      if attributes.key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.key?(:'middle')
        self.middle = attributes[:'middle']
      end

      if attributes.key?(:'lastname')
        self.lastname = attributes[:'lastname']
      end

      if attributes.key?(:'suffix')
        self.suffix = attributes[:'suffix']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'picture')
        self.picture = attributes[:'picture']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'is_admin')
        self.is_admin = attributes[:'is_admin']
      end

      if attributes.key?(:'credit_usage')
        self.credit_usage = attributes[:'credit_usage']
      end

      if attributes.key?(:'is_importing')
        self.is_importing = attributes[:'is_importing']
      end

      if attributes.key?(:'sync_status')
        self.sync_status = attributes[:'sync_status']
      end

      if attributes.key?(:'calendar_sync_status')
        self.calendar_sync_status = attributes[:'calendar_sync_status']
      end

      if attributes.key?(:'first_calendar_sync_done')
        self.first_calendar_sync_done = attributes[:'first_calendar_sync_done']
      end

      if attributes.key?(:'trial_expired')
        self.trial_expired = attributes[:'trial_expired']
      end

      if attributes.key?(:'trial_expiry_date')
        self.trial_expiry_date = attributes[:'trial_expiry_date']
      end

      if attributes.key?(:'trial_extended')
        self.trial_extended = attributes[:'trial_extended']
      end

      if attributes.key?(:'restricted')
        self.restricted = attributes[:'restricted']
      end

      if attributes.key?(:'restricted_reason')
        self.restricted_reason = attributes[:'restricted_reason']
      end

      if attributes.key?(:'team_discount_code')
        self.team_discount_code = attributes[:'team_discount_code']
      end

      if attributes.key?(:'referral_code')
        self.referral_code = attributes[:'referral_code']
      end

      if attributes.key?(:'referral_reward')
        self.referral_reward = attributes[:'referral_reward']
      end

      if attributes.key?(:'is_delinquent')
        self.is_delinquent = attributes[:'is_delinquent']
      end

      if attributes.key?(:'social_profiles')
        if (value = attributes[:'social_profiles']).is_a?(Array)
          self.social_profiles = value
        end
      end

      if attributes.key?(:'phone_numbers')
        if (value = attributes[:'phone_numbers']).is_a?(Array)
          self.phone_numbers = value
        end
      end

      if attributes.key?(:'positions')
        if (value = attributes[:'positions']).is_a?(Array)
          self.positions = value
        end
      end

      if attributes.key?(:'addresses')
        if (value = attributes[:'addresses']).is_a?(Array)
          self.addresses = value
        end
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'intercom_hash')
        self.intercom_hash = attributes[:'intercom_hash']
      end

      if attributes.key?(:'first_day_of_week')
        self.first_day_of_week = attributes[:'first_day_of_week']
      end

      if attributes.key?(:'am_pm_notation')
        self.am_pm_notation = attributes[:'am_pm_notation']
      end

      if attributes.key?(:'auto_find_email_linkedin')
        self.auto_find_email_linkedin = attributes[:'auto_find_email_linkedin']
      end

      if attributes.key?(:'data_sources_to_reconnect')
        if (value = attributes[:'data_sources_to_reconnect']).is_a?(Array)
          self.data_sources_to_reconnect = value
        end
      end

      if attributes.key?(:'data_sources')
        if (value = attributes[:'data_sources']).is_a?(Array)
          self.data_sources = value
        end
      end

      if attributes.key?(:'plan_flags')
        self.plan_flags = attributes[:'plan_flags']
      end

      if attributes.key?(:'flags')
        if (value = attributes[:'flags']).is_a?(Array)
          self.flags = value
        end
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'call_log_sync_date')
        self.call_log_sync_date = attributes[:'call_log_sync_date']
      end

      if attributes.key?(:'two_fa_enabled')
        self.two_fa_enabled = attributes[:'two_fa_enabled']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          team == o.team &&
          group == o.group &&
          amount_of_trial_days_earned == o.amount_of_trial_days_earned &&
          has_received_account_suggestions == o.has_received_account_suggestions &&
          has_archived_contacts == o.has_archived_contacts &&
          notification_channel_id == o.notification_channel_id &&
          needs_password == o.needs_password &&
          disabled == o.disabled &&
          creation_date == o.creation_date &&
          modification_date == o.modification_date &&
          prefix == o.prefix &&
          firstname == o.firstname &&
          middle == o.middle &&
          lastname == o.lastname &&
          suffix == o.suffix &&
          name == o.name &&
          email == o.email &&
          domain == o.domain &&
          picture == o.picture &&
          type == o.type &&
          is_admin == o.is_admin &&
          credit_usage == o.credit_usage &&
          is_importing == o.is_importing &&
          sync_status == o.sync_status &&
          calendar_sync_status == o.calendar_sync_status &&
          first_calendar_sync_done == o.first_calendar_sync_done &&
          trial_expired == o.trial_expired &&
          trial_expiry_date == o.trial_expiry_date &&
          trial_extended == o.trial_extended &&
          restricted == o.restricted &&
          restricted_reason == o.restricted_reason &&
          team_discount_code == o.team_discount_code &&
          referral_code == o.referral_code &&
          referral_reward == o.referral_reward &&
          is_delinquent == o.is_delinquent &&
          social_profiles == o.social_profiles &&
          phone_numbers == o.phone_numbers &&
          positions == o.positions &&
          addresses == o.addresses &&
          tags == o.tags &&
          intercom_hash == o.intercom_hash &&
          first_day_of_week == o.first_day_of_week &&
          am_pm_notation == o.am_pm_notation &&
          auto_find_email_linkedin == o.auto_find_email_linkedin &&
          data_sources_to_reconnect == o.data_sources_to_reconnect &&
          data_sources == o.data_sources &&
          plan_flags == o.plan_flags &&
          flags == o.flags &&
          role == o.role &&
          call_log_sync_date == o.call_log_sync_date &&
          two_fa_enabled == o.two_fa_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, team, group, amount_of_trial_days_earned, has_received_account_suggestions, has_archived_contacts, notification_channel_id, needs_password, disabled, creation_date, modification_date, prefix, firstname, middle, lastname, suffix, name, email, domain, picture, type, is_admin, credit_usage, is_importing, sync_status, calendar_sync_status, first_calendar_sync_done, trial_expired, trial_expiry_date, trial_extended, restricted, restricted_reason, team_discount_code, referral_code, referral_reward, is_delinquent, social_profiles, phone_numbers, positions, addresses, tags, intercom_hash, first_day_of_week, am_pm_notation, auto_find_email_linkedin, data_sources_to_reconnect, data_sources, plan_flags, flags, role, call_log_sync_date, two_fa_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
