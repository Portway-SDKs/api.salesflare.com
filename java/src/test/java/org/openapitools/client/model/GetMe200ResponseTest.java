/*
 * Salesflare API
 * # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salesflare.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetContacts200ResponseInnerPositionsInner;
import org.openapitools.client.model.GetMe200ResponseDataSourcesInner;
import org.openapitools.client.model.GetMe200ResponseDataSourcesToReconnectInner;
import org.openapitools.client.model.GetMe200ResponseFlagsInner;
import org.openapitools.client.model.GetMe200ResponsePhoneNumbersInner;
import org.openapitools.client.model.GetMe200ResponseRole;
import org.openapitools.client.model.GetMe200ResponseSocialProfilesInner;
import org.openapitools.client.model.GetMe200ResponseTeam;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetMe200Response
 */
public class GetMe200ResponseTest {
    private final GetMe200Response model = new GetMe200Response();

    /**
     * Model tests for GetMe200Response
     */
    @Test
    public void testGetMe200Response() {
        // TODO: test GetMe200Response
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'team'
     */
    @Test
    public void teamTest() {
        // TODO: test team
    }

    /**
     * Test the property 'group'
     */
    @Test
    public void groupTest() {
        // TODO: test group
    }

    /**
     * Test the property 'amountOfTrialDaysEarned'
     */
    @Test
    public void amountOfTrialDaysEarnedTest() {
        // TODO: test amountOfTrialDaysEarned
    }

    /**
     * Test the property 'hasReceivedAccountSuggestions'
     */
    @Test
    public void hasReceivedAccountSuggestionsTest() {
        // TODO: test hasReceivedAccountSuggestions
    }

    /**
     * Test the property 'hasArchivedContacts'
     */
    @Test
    public void hasArchivedContactsTest() {
        // TODO: test hasArchivedContacts
    }

    /**
     * Test the property 'notificationChannelId'
     */
    @Test
    public void notificationChannelIdTest() {
        // TODO: test notificationChannelId
    }

    /**
     * Test the property 'needsPassword'
     */
    @Test
    public void needsPasswordTest() {
        // TODO: test needsPassword
    }

    /**
     * Test the property 'disabled'
     */
    @Test
    public void disabledTest() {
        // TODO: test disabled
    }

    /**
     * Test the property 'creationDate'
     */
    @Test
    public void creationDateTest() {
        // TODO: test creationDate
    }

    /**
     * Test the property 'modificationDate'
     */
    @Test
    public void modificationDateTest() {
        // TODO: test modificationDate
    }

    /**
     * Test the property 'prefix'
     */
    @Test
    public void prefixTest() {
        // TODO: test prefix
    }

    /**
     * Test the property 'firstname'
     */
    @Test
    public void firstnameTest() {
        // TODO: test firstname
    }

    /**
     * Test the property 'middle'
     */
    @Test
    public void middleTest() {
        // TODO: test middle
    }

    /**
     * Test the property 'lastname'
     */
    @Test
    public void lastnameTest() {
        // TODO: test lastname
    }

    /**
     * Test the property 'suffix'
     */
    @Test
    public void suffixTest() {
        // TODO: test suffix
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'email'
     */
    @Test
    public void emailTest() {
        // TODO: test email
    }

    /**
     * Test the property 'domain'
     */
    @Test
    public void domainTest() {
        // TODO: test domain
    }

    /**
     * Test the property 'picture'
     */
    @Test
    public void pictureTest() {
        // TODO: test picture
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'isAdmin'
     */
    @Test
    public void isAdminTest() {
        // TODO: test isAdmin
    }

    /**
     * Test the property 'creditUsage'
     */
    @Test
    public void creditUsageTest() {
        // TODO: test creditUsage
    }

    /**
     * Test the property 'isImporting'
     */
    @Test
    public void isImportingTest() {
        // TODO: test isImporting
    }

    /**
     * Test the property 'syncStatus'
     */
    @Test
    public void syncStatusTest() {
        // TODO: test syncStatus
    }

    /**
     * Test the property 'calendarSyncStatus'
     */
    @Test
    public void calendarSyncStatusTest() {
        // TODO: test calendarSyncStatus
    }

    /**
     * Test the property 'firstCalendarSyncDone'
     */
    @Test
    public void firstCalendarSyncDoneTest() {
        // TODO: test firstCalendarSyncDone
    }

    /**
     * Test the property 'trialExpired'
     */
    @Test
    public void trialExpiredTest() {
        // TODO: test trialExpired
    }

    /**
     * Test the property 'trialExpiryDate'
     */
    @Test
    public void trialExpiryDateTest() {
        // TODO: test trialExpiryDate
    }

    /**
     * Test the property 'trialExtended'
     */
    @Test
    public void trialExtendedTest() {
        // TODO: test trialExtended
    }

    /**
     * Test the property 'restricted'
     */
    @Test
    public void restrictedTest() {
        // TODO: test restricted
    }

    /**
     * Test the property 'restrictedReason'
     */
    @Test
    public void restrictedReasonTest() {
        // TODO: test restrictedReason
    }

    /**
     * Test the property 'teamDiscountCode'
     */
    @Test
    public void teamDiscountCodeTest() {
        // TODO: test teamDiscountCode
    }

    /**
     * Test the property 'referralCode'
     */
    @Test
    public void referralCodeTest() {
        // TODO: test referralCode
    }

    /**
     * Test the property 'referralReward'
     */
    @Test
    public void referralRewardTest() {
        // TODO: test referralReward
    }

    /**
     * Test the property 'isDelinquent'
     */
    @Test
    public void isDelinquentTest() {
        // TODO: test isDelinquent
    }

    /**
     * Test the property 'socialProfiles'
     */
    @Test
    public void socialProfilesTest() {
        // TODO: test socialProfiles
    }

    /**
     * Test the property 'phoneNumbers'
     */
    @Test
    public void phoneNumbersTest() {
        // TODO: test phoneNumbers
    }

    /**
     * Test the property 'positions'
     */
    @Test
    public void positionsTest() {
        // TODO: test positions
    }

    /**
     * Test the property 'addresses'
     */
    @Test
    public void addressesTest() {
        // TODO: test addresses
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'intercomHash'
     */
    @Test
    public void intercomHashTest() {
        // TODO: test intercomHash
    }

    /**
     * Test the property 'firstDayOfWeek'
     */
    @Test
    public void firstDayOfWeekTest() {
        // TODO: test firstDayOfWeek
    }

    /**
     * Test the property 'amPmNotation'
     */
    @Test
    public void amPmNotationTest() {
        // TODO: test amPmNotation
    }

    /**
     * Test the property 'autoFindEmailLinkedin'
     */
    @Test
    public void autoFindEmailLinkedinTest() {
        // TODO: test autoFindEmailLinkedin
    }

    /**
     * Test the property 'dataSourcesToReconnect'
     */
    @Test
    public void dataSourcesToReconnectTest() {
        // TODO: test dataSourcesToReconnect
    }

    /**
     * Test the property 'dataSources'
     */
    @Test
    public void dataSourcesTest() {
        // TODO: test dataSources
    }

    /**
     * Test the property 'planFlags'
     */
    @Test
    public void planFlagsTest() {
        // TODO: test planFlags
    }

    /**
     * Test the property 'flags'
     */
    @Test
    public void flagsTest() {
        // TODO: test flags
    }

    /**
     * Test the property 'role'
     */
    @Test
    public void roleTest() {
        // TODO: test role
    }

    /**
     * Test the property 'callLogSyncDate'
     */
    @Test
    public void callLogSyncDateTest() {
        // TODO: test callLogSyncDate
    }

    /**
     * Test the property 'twoFaEnabled'
     */
    @Test
    public void twoFaEnabledTest() {
        // TODO: test twoFaEnabled
    }

}
