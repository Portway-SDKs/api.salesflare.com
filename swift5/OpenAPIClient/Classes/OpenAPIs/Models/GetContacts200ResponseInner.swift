//
// GetContacts200ResponseInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetContacts200ResponseInner: Codable, JSONEncodable, Hashable {

    static let emailRule = StringRule(minLength: nil, maxLength: 1000, pattern: nil)
    public var account: GetContacts200ResponseInnerAccount?
    public var id: Double
    public var _prefix: String?
    public var firstname: String?
    public var middle: String?
    public var lastname: String?
    public var suffix: String?
    public var name: String?
    public var email: String?
    public var domain: String?
    public var birthDate: String?
    public var optOut: Bool?
    public var optOutDate: Date?
    public var optOutCampaign: String?
    public var bounced: Bool?
    public var bouncedDate: Date?
    public var files: [AnyCodable]?
    public var owner: GetContacts200ResponseInnerOwner?
    public var picture: String?
    public var archived: Bool?
    public var notViewed: Bool?
    public var canEdit: Bool?
    public var creationDate: Date?
    public var modificationDate: Date?
    public var type: String?
    public var tags: [GetContacts200ResponseInnerTagsInner]?
    public var addresses: [GetContacts200ResponseInnerAddressesInner]?
    public var phoneNumber: String?
    public var mobilePhoneNumber: String?
    public var homePhoneNumber: String?
    public var faxNumber: String?
    public var phoneNumbers: [GetContacts200ResponseInnerPhoneNumbersInner]?
    public var positions: [GetContacts200ResponseInnerPositionsInner]?
    public var socialProfiles: [GetContacts200ResponseInnerSocialProfilesInner]?
    public var organisation: String?
    public var role: String?
    public var custom: AnyCodable?
    public var lastEmailDate: Date?
    public var lastMeetingDate: Date?

    public init(account: GetContacts200ResponseInnerAccount? = nil, id: Double, _prefix: String? = nil, firstname: String? = nil, middle: String? = nil, lastname: String? = nil, suffix: String? = nil, name: String? = nil, email: String? = nil, domain: String? = nil, birthDate: String? = nil, optOut: Bool? = nil, optOutDate: Date? = nil, optOutCampaign: String? = nil, bounced: Bool? = nil, bouncedDate: Date? = nil, files: [AnyCodable]? = nil, owner: GetContacts200ResponseInnerOwner? = nil, picture: String? = nil, archived: Bool? = nil, notViewed: Bool? = nil, canEdit: Bool? = nil, creationDate: Date? = nil, modificationDate: Date? = nil, type: String? = nil, tags: [GetContacts200ResponseInnerTagsInner]? = nil, addresses: [GetContacts200ResponseInnerAddressesInner]? = nil, phoneNumber: String? = nil, mobilePhoneNumber: String? = nil, homePhoneNumber: String? = nil, faxNumber: String? = nil, phoneNumbers: [GetContacts200ResponseInnerPhoneNumbersInner]? = nil, positions: [GetContacts200ResponseInnerPositionsInner]? = nil, socialProfiles: [GetContacts200ResponseInnerSocialProfilesInner]? = nil, organisation: String? = nil, role: String? = nil, custom: AnyCodable? = nil, lastEmailDate: Date? = nil, lastMeetingDate: Date? = nil) {
        self.account = account
        self.id = id
        self._prefix = _prefix
        self.firstname = firstname
        self.middle = middle
        self.lastname = lastname
        self.suffix = suffix
        self.name = name
        self.email = email
        self.domain = domain
        self.birthDate = birthDate
        self.optOut = optOut
        self.optOutDate = optOutDate
        self.optOutCampaign = optOutCampaign
        self.bounced = bounced
        self.bouncedDate = bouncedDate
        self.files = files
        self.owner = owner
        self.picture = picture
        self.archived = archived
        self.notViewed = notViewed
        self.canEdit = canEdit
        self.creationDate = creationDate
        self.modificationDate = modificationDate
        self.type = type
        self.tags = tags
        self.addresses = addresses
        self.phoneNumber = phoneNumber
        self.mobilePhoneNumber = mobilePhoneNumber
        self.homePhoneNumber = homePhoneNumber
        self.faxNumber = faxNumber
        self.phoneNumbers = phoneNumbers
        self.positions = positions
        self.socialProfiles = socialProfiles
        self.organisation = organisation
        self.role = role
        self.custom = custom
        self.lastEmailDate = lastEmailDate
        self.lastMeetingDate = lastMeetingDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case account
        case id
        case _prefix = "prefix"
        case firstname
        case middle
        case lastname
        case suffix
        case name
        case email
        case domain
        case birthDate = "birth_date"
        case optOut = "opt-out"
        case optOutDate = "opt-out_date"
        case optOutCampaign = "opt-out_campaign"
        case bounced
        case bouncedDate = "bounced_date"
        case files
        case owner
        case picture
        case archived
        case notViewed = "not_viewed"
        case canEdit = "can_edit"
        case creationDate = "creation_date"
        case modificationDate = "modification_date"
        case type
        case tags
        case addresses
        case phoneNumber = "phone_number"
        case mobilePhoneNumber = "mobile_phone_number"
        case homePhoneNumber = "home_phone_number"
        case faxNumber = "fax_number"
        case phoneNumbers = "phone_numbers"
        case positions
        case socialProfiles = "social_profiles"
        case organisation
        case role
        case custom
        case lastEmailDate = "last_email_date"
        case lastMeetingDate = "last_meeting_date"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(_prefix, forKey: ._prefix)
        try container.encodeIfPresent(firstname, forKey: .firstname)
        try container.encodeIfPresent(middle, forKey: .middle)
        try container.encodeIfPresent(lastname, forKey: .lastname)
        try container.encodeIfPresent(suffix, forKey: .suffix)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(domain, forKey: .domain)
        try container.encodeIfPresent(birthDate, forKey: .birthDate)
        try container.encodeIfPresent(optOut, forKey: .optOut)
        try container.encodeIfPresent(optOutDate, forKey: .optOutDate)
        try container.encodeIfPresent(optOutCampaign, forKey: .optOutCampaign)
        try container.encodeIfPresent(bounced, forKey: .bounced)
        try container.encodeIfPresent(bouncedDate, forKey: .bouncedDate)
        try container.encodeIfPresent(files, forKey: .files)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(picture, forKey: .picture)
        try container.encodeIfPresent(archived, forKey: .archived)
        try container.encodeIfPresent(notViewed, forKey: .notViewed)
        try container.encodeIfPresent(canEdit, forKey: .canEdit)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(modificationDate, forKey: .modificationDate)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(addresses, forKey: .addresses)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(mobilePhoneNumber, forKey: .mobilePhoneNumber)
        try container.encodeIfPresent(homePhoneNumber, forKey: .homePhoneNumber)
        try container.encodeIfPresent(faxNumber, forKey: .faxNumber)
        try container.encodeIfPresent(phoneNumbers, forKey: .phoneNumbers)
        try container.encodeIfPresent(positions, forKey: .positions)
        try container.encodeIfPresent(socialProfiles, forKey: .socialProfiles)
        try container.encodeIfPresent(organisation, forKey: .organisation)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(custom, forKey: .custom)
        try container.encodeIfPresent(lastEmailDate, forKey: .lastEmailDate)
        try container.encodeIfPresent(lastMeetingDate, forKey: .lastMeetingDate)
    }
}

