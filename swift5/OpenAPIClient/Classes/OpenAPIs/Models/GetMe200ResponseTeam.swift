//
// GetMe200ResponseTeam.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetMe200ResponseTeam: Codable, JSONEncodable, Hashable {

    public enum PaymentType: String, Codable, CaseIterable {
        case stripe = "stripe"
        case free = "free"
        case appstack = "appstack"
    }
    public enum BillingFrequency: String, Codable, CaseIterable {
        case monthly = "monthly"
        case annually = "annually"
    }
    public enum CreditPackage: String, Codable, CaseIterable {
        case s = "S"
        case m = "M"
        case l = "L"
        case xl = "XL"
    }
    public var id: Double?
    public var name: String?
    public var trackingToken: String?
    public var daysUntilAccountInactive: Double?
    public var totalUserCount: Double?
    public var enabledUserCount: Double?
    public var paidUserCount: Double?
    public var freeUsers: Double?
    public var subscribed: Bool?
    public var paymentType: PaymentType?
    public var discountCode: String?
    public var discountType: String?
    public var promoDescription: String?
    public var promoRedeemBy: Date?
    public var promoCode: String?
    public var plan: Double?
    public var currency: GetMe200ResponseTeamCurrency?
    public var billingCurrency: GetMe200ResponseTeamCurrency?
    public var billingFrequency: BillingFrequency?
    public var creationDate: Date?
    public var timeZone: String?
    public var stripeCustomerId: String?
    public var campaign: String?
    public var isReferred: Bool?
    public var creditUsage: Double?
    public var creditQuota: Double?
    public var creditPackage: CreditPackage?
    public var emailTrackingSubdomain: String?
    public var emailTrackingDomain: GetMe200ResponseTeamEmailTrackingDomain?
    public var automatedTagging: Bool?
    public var domain: String?

    public init(id: Double? = nil, name: String? = nil, trackingToken: String? = nil, daysUntilAccountInactive: Double? = nil, totalUserCount: Double? = nil, enabledUserCount: Double? = nil, paidUserCount: Double? = nil, freeUsers: Double? = nil, subscribed: Bool? = nil, paymentType: PaymentType? = nil, discountCode: String? = nil, discountType: String? = nil, promoDescription: String? = nil, promoRedeemBy: Date? = nil, promoCode: String? = nil, plan: Double? = nil, currency: GetMe200ResponseTeamCurrency? = nil, billingCurrency: GetMe200ResponseTeamCurrency? = nil, billingFrequency: BillingFrequency? = nil, creationDate: Date? = nil, timeZone: String? = nil, stripeCustomerId: String? = nil, campaign: String? = nil, isReferred: Bool? = nil, creditUsage: Double? = nil, creditQuota: Double? = nil, creditPackage: CreditPackage? = nil, emailTrackingSubdomain: String? = nil, emailTrackingDomain: GetMe200ResponseTeamEmailTrackingDomain? = nil, automatedTagging: Bool? = nil, domain: String? = nil) {
        self.id = id
        self.name = name
        self.trackingToken = trackingToken
        self.daysUntilAccountInactive = daysUntilAccountInactive
        self.totalUserCount = totalUserCount
        self.enabledUserCount = enabledUserCount
        self.paidUserCount = paidUserCount
        self.freeUsers = freeUsers
        self.subscribed = subscribed
        self.paymentType = paymentType
        self.discountCode = discountCode
        self.discountType = discountType
        self.promoDescription = promoDescription
        self.promoRedeemBy = promoRedeemBy
        self.promoCode = promoCode
        self.plan = plan
        self.currency = currency
        self.billingCurrency = billingCurrency
        self.billingFrequency = billingFrequency
        self.creationDate = creationDate
        self.timeZone = timeZone
        self.stripeCustomerId = stripeCustomerId
        self.campaign = campaign
        self.isReferred = isReferred
        self.creditUsage = creditUsage
        self.creditQuota = creditQuota
        self.creditPackage = creditPackage
        self.emailTrackingSubdomain = emailTrackingSubdomain
        self.emailTrackingDomain = emailTrackingDomain
        self.automatedTagging = automatedTagging
        self.domain = domain
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case trackingToken = "tracking_token"
        case daysUntilAccountInactive = "days_until_account_inactive"
        case totalUserCount = "total_user_count"
        case enabledUserCount = "enabled_user_count"
        case paidUserCount = "paid_user_count"
        case freeUsers = "free_users"
        case subscribed
        case paymentType = "payment_type"
        case discountCode = "discount_code"
        case discountType = "discount_type"
        case promoDescription = "promo_description"
        case promoRedeemBy = "promo_redeem_by"
        case promoCode = "promo_code"
        case plan
        case currency
        case billingCurrency = "billing_currency"
        case billingFrequency = "billing_frequency"
        case creationDate = "creation_date"
        case timeZone = "time_zone"
        case stripeCustomerId = "stripe_customer_id"
        case campaign
        case isReferred = "is_referred"
        case creditUsage = "credit_usage"
        case creditQuota = "credit_quota"
        case creditPackage = "credit_package"
        case emailTrackingSubdomain = "email_tracking_subdomain"
        case emailTrackingDomain = "email_tracking_domain"
        case automatedTagging = "automated_tagging"
        case domain
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(trackingToken, forKey: .trackingToken)
        try container.encodeIfPresent(daysUntilAccountInactive, forKey: .daysUntilAccountInactive)
        try container.encodeIfPresent(totalUserCount, forKey: .totalUserCount)
        try container.encodeIfPresent(enabledUserCount, forKey: .enabledUserCount)
        try container.encodeIfPresent(paidUserCount, forKey: .paidUserCount)
        try container.encodeIfPresent(freeUsers, forKey: .freeUsers)
        try container.encodeIfPresent(subscribed, forKey: .subscribed)
        try container.encodeIfPresent(paymentType, forKey: .paymentType)
        try container.encodeIfPresent(discountCode, forKey: .discountCode)
        try container.encodeIfPresent(discountType, forKey: .discountType)
        try container.encodeIfPresent(promoDescription, forKey: .promoDescription)
        try container.encodeIfPresent(promoRedeemBy, forKey: .promoRedeemBy)
        try container.encodeIfPresent(promoCode, forKey: .promoCode)
        try container.encodeIfPresent(plan, forKey: .plan)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(billingCurrency, forKey: .billingCurrency)
        try container.encodeIfPresent(billingFrequency, forKey: .billingFrequency)
        try container.encodeIfPresent(creationDate, forKey: .creationDate)
        try container.encodeIfPresent(timeZone, forKey: .timeZone)
        try container.encodeIfPresent(stripeCustomerId, forKey: .stripeCustomerId)
        try container.encodeIfPresent(campaign, forKey: .campaign)
        try container.encodeIfPresent(isReferred, forKey: .isReferred)
        try container.encodeIfPresent(creditUsage, forKey: .creditUsage)
        try container.encodeIfPresent(creditQuota, forKey: .creditQuota)
        try container.encodeIfPresent(creditPackage, forKey: .creditPackage)
        try container.encodeIfPresent(emailTrackingSubdomain, forKey: .emailTrackingSubdomain)
        try container.encodeIfPresent(emailTrackingDomain, forKey: .emailTrackingDomain)
        try container.encodeIfPresent(automatedTagging, forKey: .automatedTagging)
        try container.encodeIfPresent(domain, forKey: .domain)
    }
}

