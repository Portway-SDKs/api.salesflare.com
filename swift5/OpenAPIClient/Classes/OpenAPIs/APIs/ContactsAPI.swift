//
// ContactsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ContactsAPI {

    /**
     * enum for parameter type
     */
    public enum ModelType_getContacts: String, CaseIterable {
        case customer = "customer"
        case mycontacts = "mycontacts"
    }

    /**
     List contacts
     
     - parameter id: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter email: (query)  (optional)
     - parameter phoneNumber: (query)  (optional)
     - parameter domain: (query)  (optional)
     - parameter modificationAfter: (query)  (optional)
     - parameter modificationBefore: (query)  (optional)
     - parameter creationAfter: (query)  (optional)
     - parameter creationBefore: (query)  (optional)
     - parameter account: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter tagName: (query)  (optional)
     - parameter positionRole: (query)  (optional)
     - parameter addressCountry: (query)  (optional)
     - parameter addressStateRegion: (query)  (optional)
     - parameter addressCity: (query)  (optional)
     - parameter includeArchived: (query)  (optional)
     - parameter search: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20.0)
     - parameter offset: (query)  (optional, default to 0.0)
     - parameter custom: (query)  (optional)
     - parameter orderBy: (query) Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     - parameter q: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getContacts(id: [Double]? = nil, name: String? = nil, email: String? = nil, phoneNumber: String? = nil, domain: String? = nil, modificationAfter: Date? = nil, modificationBefore: Date? = nil, creationAfter: Date? = nil, creationBefore: Date? = nil, account: [Double]? = nil, tag: [Double]? = nil, tagName: [String]? = nil, positionRole: [String]? = nil, addressCountry: [String]? = nil, addressStateRegion: [String]? = nil, addressCity: [String]? = nil, includeArchived: Bool? = nil, search: String? = nil, type: ModelType_getContacts? = nil, limit: Double? = nil, offset: Double? = nil, custom: String? = nil, orderBy: [String]? = nil, q: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [GetContacts200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getContactsWithRequestBuilder(id: id, name: name, email: email, phoneNumber: phoneNumber, domain: domain, modificationAfter: modificationAfter, modificationBefore: modificationBefore, creationAfter: creationAfter, creationBefore: creationBefore, account: account, tag: tag, tagName: tagName, positionRole: positionRole, addressCountry: addressCountry, addressStateRegion: addressStateRegion, addressCity: addressCity, includeArchived: includeArchived, search: search, type: type, limit: limit, offset: offset, custom: custom, orderBy: orderBy, q: q).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List contacts
     - GET /contacts
     - parameter id: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter email: (query)  (optional)
     - parameter phoneNumber: (query)  (optional)
     - parameter domain: (query)  (optional)
     - parameter modificationAfter: (query)  (optional)
     - parameter modificationBefore: (query)  (optional)
     - parameter creationAfter: (query)  (optional)
     - parameter creationBefore: (query)  (optional)
     - parameter account: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter tagName: (query)  (optional)
     - parameter positionRole: (query)  (optional)
     - parameter addressCountry: (query)  (optional)
     - parameter addressStateRegion: (query)  (optional)
     - parameter addressCity: (query)  (optional)
     - parameter includeArchived: (query)  (optional)
     - parameter search: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter limit: (query)  (optional, default to 20.0)
     - parameter offset: (query)  (optional, default to 0.0)
     - parameter custom: (query)  (optional)
     - parameter orderBy: (query) Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     - parameter q: (query)  (optional)
     - returns: RequestBuilder<[GetContacts200ResponseInner]> 
     */
    open class func getContactsWithRequestBuilder(id: [Double]? = nil, name: String? = nil, email: String? = nil, phoneNumber: String? = nil, domain: String? = nil, modificationAfter: Date? = nil, modificationBefore: Date? = nil, creationAfter: Date? = nil, creationBefore: Date? = nil, account: [Double]? = nil, tag: [Double]? = nil, tagName: [String]? = nil, positionRole: [String]? = nil, addressCountry: [String]? = nil, addressStateRegion: [String]? = nil, addressCity: [String]? = nil, includeArchived: Bool? = nil, search: String? = nil, type: ModelType_getContacts? = nil, limit: Double? = nil, offset: Double? = nil, custom: String? = nil, orderBy: [String]? = nil, q: String? = nil) -> RequestBuilder<[GetContacts200ResponseInner]> {
        let localVariablePath = "/contacts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "name": (wrappedValue: name?.encodeToJSON(), isExplode: false),
            "email": (wrappedValue: email?.encodeToJSON(), isExplode: false),
            "phone_number": (wrappedValue: phoneNumber?.encodeToJSON(), isExplode: false),
            "domain": (wrappedValue: domain?.encodeToJSON(), isExplode: false),
            "modification_after": (wrappedValue: modificationAfter?.encodeToJSON(), isExplode: false),
            "modification_before": (wrappedValue: modificationBefore?.encodeToJSON(), isExplode: false),
            "creation_after": (wrappedValue: creationAfter?.encodeToJSON(), isExplode: false),
            "creation_before": (wrappedValue: creationBefore?.encodeToJSON(), isExplode: false),
            "account": (wrappedValue: account?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "tag.name": (wrappedValue: tagName?.encodeToJSON(), isExplode: true),
            "position.role": (wrappedValue: positionRole?.encodeToJSON(), isExplode: true),
            "address.country": (wrappedValue: addressCountry?.encodeToJSON(), isExplode: true),
            "address.state_region": (wrappedValue: addressStateRegion?.encodeToJSON(), isExplode: true),
            "address.city": (wrappedValue: addressCity?.encodeToJSON(), isExplode: true),
            "includeArchived": (wrappedValue: includeArchived?.encodeToJSON(), isExplode: false),
            "search": (wrappedValue: search?.encodeToJSON(), isExplode: false),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: false),
            "custom": (wrappedValue: custom?.encodeToJSON(), isExplode: false),
            "order_by": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetContacts200ResponseInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a contact
     
     - parameter force: (query) When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     - parameter body: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postContacts(force: Bool? = nil, body: [PostContactsRequestInner]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [PostContacts200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return postContactsWithRequestBuilder(force: force, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a contact
     - POST /contacts
     - When payload is an array you will get an array back, if just an object or an array with 1 item you get an object back
     - parameter force: (query) When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     - parameter body: (body)  (optional)
     - returns: RequestBuilder<[PostContacts200ResponseInner]> 
     */
    open class func postContactsWithRequestBuilder(force: Bool? = nil, body: [PostContactsRequestInner]? = nil) -> RequestBuilder<[PostContacts200ResponseInner]> {
        let localVariablePath = "/contacts"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "force": (wrappedValue: force?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PostContacts200ResponseInner]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
