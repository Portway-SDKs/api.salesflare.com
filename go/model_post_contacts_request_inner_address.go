/*
Salesflare API

# Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

API version: 1.0.0
Contact: support@salesflare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package salesflare

import (
	"encoding/json"
)

// checks if the PostContactsRequestInnerAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostContactsRequestInnerAddress{}

// PostContactsRequestInnerAddress struct for PostContactsRequestInnerAddress
type PostContactsRequestInnerAddress struct {
	City *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`
	// Deprecated property. Use state_region instead.
	Region *string `json:"region,omitempty"`
	StateRegion *string `json:"state_region,omitempty"`
	Street *string `json:"street,omitempty"`
	Type *string `json:"type,omitempty"`
	Zip *string `json:"zip,omitempty"`
}

// NewPostContactsRequestInnerAddress instantiates a new PostContactsRequestInnerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostContactsRequestInnerAddress() *PostContactsRequestInnerAddress {
	this := PostContactsRequestInnerAddress{}
	return &this
}

// NewPostContactsRequestInnerAddressWithDefaults instantiates a new PostContactsRequestInnerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostContactsRequestInnerAddressWithDefaults() *PostContactsRequestInnerAddress {
	this := PostContactsRequestInnerAddress{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *PostContactsRequestInnerAddress) SetCity(v string) {
	o.City = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *PostContactsRequestInnerAddress) SetCountry(v string) {
	o.Country = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *PostContactsRequestInnerAddress) SetRegion(v string) {
	o.Region = &v
}

// GetStateRegion returns the StateRegion field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetStateRegion() string {
	if o == nil || IsNil(o.StateRegion) {
		var ret string
		return ret
	}
	return *o.StateRegion
}

// GetStateRegionOk returns a tuple with the StateRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetStateRegionOk() (*string, bool) {
	if o == nil || IsNil(o.StateRegion) {
		return nil, false
	}
	return o.StateRegion, true
}

// HasStateRegion returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasStateRegion() bool {
	if o != nil && !IsNil(o.StateRegion) {
		return true
	}

	return false
}

// SetStateRegion gets a reference to the given string and assigns it to the StateRegion field.
func (o *PostContactsRequestInnerAddress) SetStateRegion(v string) {
	o.StateRegion = &v
}

// GetStreet returns the Street field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetStreet() string {
	if o == nil || IsNil(o.Street) {
		var ret string
		return ret
	}
	return *o.Street
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetStreetOk() (*string, bool) {
	if o == nil || IsNil(o.Street) {
		return nil, false
	}
	return o.Street, true
}

// HasStreet returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasStreet() bool {
	if o != nil && !IsNil(o.Street) {
		return true
	}

	return false
}

// SetStreet gets a reference to the given string and assigns it to the Street field.
func (o *PostContactsRequestInnerAddress) SetStreet(v string) {
	o.Street = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PostContactsRequestInnerAddress) SetType(v string) {
	o.Type = &v
}

// GetZip returns the Zip field value if set, zero value otherwise.
func (o *PostContactsRequestInnerAddress) GetZip() string {
	if o == nil || IsNil(o.Zip) {
		var ret string
		return ret
	}
	return *o.Zip
}

// GetZipOk returns a tuple with the Zip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostContactsRequestInnerAddress) GetZipOk() (*string, bool) {
	if o == nil || IsNil(o.Zip) {
		return nil, false
	}
	return o.Zip, true
}

// HasZip returns a boolean if a field has been set.
func (o *PostContactsRequestInnerAddress) HasZip() bool {
	if o != nil && !IsNil(o.Zip) {
		return true
	}

	return false
}

// SetZip gets a reference to the given string and assigns it to the Zip field.
func (o *PostContactsRequestInnerAddress) SetZip(v string) {
	o.Zip = &v
}

func (o PostContactsRequestInnerAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostContactsRequestInnerAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.StateRegion) {
		toSerialize["state_region"] = o.StateRegion
	}
	if !IsNil(o.Street) {
		toSerialize["street"] = o.Street
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Zip) {
		toSerialize["zip"] = o.Zip
	}
	return toSerialize, nil
}

type NullablePostContactsRequestInnerAddress struct {
	value *PostContactsRequestInnerAddress
	isSet bool
}

func (v NullablePostContactsRequestInnerAddress) Get() *PostContactsRequestInnerAddress {
	return v.value
}

func (v *NullablePostContactsRequestInnerAddress) Set(val *PostContactsRequestInnerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullablePostContactsRequestInnerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullablePostContactsRequestInnerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostContactsRequestInnerAddress(val *PostContactsRequestInnerAddress) *NullablePostContactsRequestInnerAddress {
	return &NullablePostContactsRequestInnerAddress{value: val, isSet: true}
}

func (v NullablePostContactsRequestInnerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostContactsRequestInnerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


