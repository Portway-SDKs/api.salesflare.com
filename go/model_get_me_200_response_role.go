/*
Salesflare API

# Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

API version: 1.0.0
Contact: support@salesflare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package salesflare

import (
	"encoding/json"
)

// checks if the GetMe200ResponseRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMe200ResponseRole{}

// GetMe200ResponseRole struct for GetMe200ResponseRole
type GetMe200ResponseRole struct {
	Id *float32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Permissions *GetMe200ResponseRolePermissions `json:"permissions,omitempty"`
}

// NewGetMe200ResponseRole instantiates a new GetMe200ResponseRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMe200ResponseRole() *GetMe200ResponseRole {
	this := GetMe200ResponseRole{}
	return &this
}

// NewGetMe200ResponseRoleWithDefaults instantiates a new GetMe200ResponseRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMe200ResponseRoleWithDefaults() *GetMe200ResponseRole {
	this := GetMe200ResponseRole{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetMe200ResponseRole) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseRole) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetMe200ResponseRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *GetMe200ResponseRole) SetId(v float32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetMe200ResponseRole) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseRole) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetMe200ResponseRole) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetMe200ResponseRole) SetName(v string) {
	o.Name = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *GetMe200ResponseRole) GetPermissions() GetMe200ResponseRolePermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret GetMe200ResponseRolePermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseRole) GetPermissionsOk() (*GetMe200ResponseRolePermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *GetMe200ResponseRole) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given GetMe200ResponseRolePermissions and assigns it to the Permissions field.
func (o *GetMe200ResponseRole) SetPermissions(v GetMe200ResponseRolePermissions) {
	o.Permissions = &v
}

func (o GetMe200ResponseRole) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMe200ResponseRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableGetMe200ResponseRole struct {
	value *GetMe200ResponseRole
	isSet bool
}

func (v NullableGetMe200ResponseRole) Get() *GetMe200ResponseRole {
	return v.value
}

func (v *NullableGetMe200ResponseRole) Set(val *GetMe200ResponseRole) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMe200ResponseRole) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMe200ResponseRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMe200ResponseRole(val *GetMe200ResponseRole) *NullableGetMe200ResponseRole {
	return &NullableGetMe200ResponseRole{value: val, isSet: true}
}

func (v NullableGetMe200ResponseRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMe200ResponseRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


