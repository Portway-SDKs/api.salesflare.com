/*
Salesflare API

# Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

API version: 1.0.0
Contact: support@salesflare.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package salesflare

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GetMe200ResponseFlagsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMe200ResponseFlagsInner{}

// GetMe200ResponseFlagsInner struct for GetMe200ResponseFlagsInner
type GetMe200ResponseFlagsInner struct {
	Id *float32 `json:"id,omitempty"`
	Flag float32 `json:"flag"`
	Name string `json:"name"`
	State bool `json:"state"`
	User *float32 `json:"user,omitempty"`
	Plan *float32 `json:"plan,omitempty"`
	CreationDate *time.Time `json:"creation_date,omitempty"`
	ModificationDate *time.Time `json:"modification_date,omitempty"`
}

type _GetMe200ResponseFlagsInner GetMe200ResponseFlagsInner

// NewGetMe200ResponseFlagsInner instantiates a new GetMe200ResponseFlagsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMe200ResponseFlagsInner(flag float32, name string, state bool) *GetMe200ResponseFlagsInner {
	this := GetMe200ResponseFlagsInner{}
	this.Flag = flag
	this.Name = name
	this.State = state
	return &this
}

// NewGetMe200ResponseFlagsInnerWithDefaults instantiates a new GetMe200ResponseFlagsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMe200ResponseFlagsInnerWithDefaults() *GetMe200ResponseFlagsInner {
	this := GetMe200ResponseFlagsInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GetMe200ResponseFlagsInner) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GetMe200ResponseFlagsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *GetMe200ResponseFlagsInner) SetId(v float32) {
	o.Id = &v
}

// GetFlag returns the Flag field value
func (o *GetMe200ResponseFlagsInner) GetFlag() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Flag
}

// GetFlagOk returns a tuple with the Flag field value
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetFlagOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Flag, true
}

// SetFlag sets field value
func (o *GetMe200ResponseFlagsInner) SetFlag(v float32) {
	o.Flag = v
}

// GetName returns the Name field value
func (o *GetMe200ResponseFlagsInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetMe200ResponseFlagsInner) SetName(v string) {
	o.Name = v
}

// GetState returns the State field value
func (o *GetMe200ResponseFlagsInner) GetState() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetStateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *GetMe200ResponseFlagsInner) SetState(v bool) {
	o.State = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *GetMe200ResponseFlagsInner) GetUser() float32 {
	if o == nil || IsNil(o.User) {
		var ret float32
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetUserOk() (*float32, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *GetMe200ResponseFlagsInner) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given float32 and assigns it to the User field.
func (o *GetMe200ResponseFlagsInner) SetUser(v float32) {
	o.User = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *GetMe200ResponseFlagsInner) GetPlan() float32 {
	if o == nil || IsNil(o.Plan) {
		var ret float32
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetPlanOk() (*float32, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *GetMe200ResponseFlagsInner) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given float32 and assigns it to the Plan field.
func (o *GetMe200ResponseFlagsInner) SetPlan(v float32) {
	o.Plan = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *GetMe200ResponseFlagsInner) GetCreationDate() time.Time {
	if o == nil || IsNil(o.CreationDate) {
		var ret time.Time
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetCreationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *GetMe200ResponseFlagsInner) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given time.Time and assigns it to the CreationDate field.
func (o *GetMe200ResponseFlagsInner) SetCreationDate(v time.Time) {
	o.CreationDate = &v
}

// GetModificationDate returns the ModificationDate field value if set, zero value otherwise.
func (o *GetMe200ResponseFlagsInner) GetModificationDate() time.Time {
	if o == nil || IsNil(o.ModificationDate) {
		var ret time.Time
		return ret
	}
	return *o.ModificationDate
}

// GetModificationDateOk returns a tuple with the ModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMe200ResponseFlagsInner) GetModificationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ModificationDate) {
		return nil, false
	}
	return o.ModificationDate, true
}

// HasModificationDate returns a boolean if a field has been set.
func (o *GetMe200ResponseFlagsInner) HasModificationDate() bool {
	if o != nil && !IsNil(o.ModificationDate) {
		return true
	}

	return false
}

// SetModificationDate gets a reference to the given time.Time and assigns it to the ModificationDate field.
func (o *GetMe200ResponseFlagsInner) SetModificationDate(v time.Time) {
	o.ModificationDate = &v
}

func (o GetMe200ResponseFlagsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMe200ResponseFlagsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["flag"] = o.Flag
	toSerialize["name"] = o.Name
	toSerialize["state"] = o.State
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creation_date"] = o.CreationDate
	}
	if !IsNil(o.ModificationDate) {
		toSerialize["modification_date"] = o.ModificationDate
	}
	return toSerialize, nil
}

func (o *GetMe200ResponseFlagsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"flag",
		"name",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMe200ResponseFlagsInner := _GetMe200ResponseFlagsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetMe200ResponseFlagsInner)

	if err != nil {
		return err
	}

	*o = GetMe200ResponseFlagsInner(varGetMe200ResponseFlagsInner)

	return err
}

type NullableGetMe200ResponseFlagsInner struct {
	value *GetMe200ResponseFlagsInner
	isSet bool
}

func (v NullableGetMe200ResponseFlagsInner) Get() *GetMe200ResponseFlagsInner {
	return v.value
}

func (v *NullableGetMe200ResponseFlagsInner) Set(val *GetMe200ResponseFlagsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMe200ResponseFlagsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMe200ResponseFlagsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMe200ResponseFlagsInner(val *GetMe200ResponseFlagsInner) *NullableGetMe200ResponseFlagsInner {
	return &NullableGetMe200ResponseFlagsInner{value: val, isSet: true}
}

func (v NullableGetMe200ResponseFlagsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMe200ResponseFlagsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


