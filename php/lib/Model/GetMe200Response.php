<?php
/**
 * GetMe200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Salesflare API
 *
 * # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salesflare.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetMe200Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetMe200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getMe_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'team' => '\OpenAPI\Client\Model\GetMe200ResponseTeam',
        'group' => 'float',
        'amount_of_trial_days_earned' => 'float',
        'has_received_account_suggestions' => 'bool',
        'has_archived_contacts' => 'bool',
        'notification_channel_id' => 'string',
        'needs_password' => 'bool',
        'disabled' => 'bool',
        'creation_date' => '\DateTime',
        'modification_date' => '\DateTime',
        'prefix' => 'string',
        'firstname' => 'string',
        'middle' => 'string',
        'lastname' => 'string',
        'suffix' => 'string',
        'name' => 'string',
        'email' => 'string',
        'domain' => 'string',
        'picture' => 'string',
        'type' => 'string',
        'is_admin' => 'bool',
        'credit_usage' => 'float',
        'is_importing' => 'bool',
        'sync_status' => 'string',
        'calendar_sync_status' => 'string',
        'first_calendar_sync_done' => 'bool',
        'trial_expired' => 'bool',
        'trial_expiry_date' => '\DateTime',
        'trial_extended' => 'bool',
        'restricted' => 'bool',
        'restricted_reason' => 'string',
        'team_discount_code' => 'string',
        'referral_code' => 'string',
        'referral_reward' => 'float',
        'is_delinquent' => 'bool',
        'social_profiles' => '\OpenAPI\Client\Model\GetMe200ResponseSocialProfilesInner[]',
        'phone_numbers' => '\OpenAPI\Client\Model\GetMe200ResponsePhoneNumbersInner[]',
        'positions' => '\OpenAPI\Client\Model\GetContacts200ResponseInnerPositionsInner[]',
        'addresses' => 'object[]',
        'tags' => 'object[]',
        'intercom_hash' => 'string',
        'first_day_of_week' => 'float',
        'am_pm_notation' => 'bool',
        'auto_find_email_linkedin' => 'bool',
        'data_sources_to_reconnect' => '\OpenAPI\Client\Model\GetMe200ResponseDataSourcesToReconnectInner[]',
        'data_sources' => '\OpenAPI\Client\Model\GetMe200ResponseDataSourcesInner[]',
        'plan_flags' => 'object',
        'flags' => '\OpenAPI\Client\Model\GetMe200ResponseFlagsInner[]',
        'role' => '\OpenAPI\Client\Model\GetMe200ResponseRole',
        'call_log_sync_date' => '\DateTime',
        'two_fa_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'team' => null,
        'group' => null,
        'amount_of_trial_days_earned' => null,
        'has_received_account_suggestions' => null,
        'has_archived_contacts' => null,
        'notification_channel_id' => null,
        'needs_password' => null,
        'disabled' => null,
        'creation_date' => 'date-time',
        'modification_date' => 'date-time',
        'prefix' => null,
        'firstname' => null,
        'middle' => null,
        'lastname' => null,
        'suffix' => null,
        'name' => null,
        'email' => null,
        'domain' => null,
        'picture' => null,
        'type' => null,
        'is_admin' => null,
        'credit_usage' => null,
        'is_importing' => null,
        'sync_status' => null,
        'calendar_sync_status' => null,
        'first_calendar_sync_done' => null,
        'trial_expired' => null,
        'trial_expiry_date' => 'date-time',
        'trial_extended' => null,
        'restricted' => null,
        'restricted_reason' => null,
        'team_discount_code' => null,
        'referral_code' => null,
        'referral_reward' => null,
        'is_delinquent' => null,
        'social_profiles' => null,
        'phone_numbers' => null,
        'positions' => null,
        'addresses' => null,
        'tags' => null,
        'intercom_hash' => null,
        'first_day_of_week' => null,
        'am_pm_notation' => null,
        'auto_find_email_linkedin' => null,
        'data_sources_to_reconnect' => null,
        'data_sources' => null,
        'plan_flags' => null,
        'flags' => null,
        'role' => null,
        'call_log_sync_date' => 'date-time',
        'two_fa_enabled' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'team' => false,
        'group' => false,
        'amount_of_trial_days_earned' => false,
        'has_received_account_suggestions' => false,
        'has_archived_contacts' => false,
        'notification_channel_id' => false,
        'needs_password' => false,
        'disabled' => false,
        'creation_date' => false,
        'modification_date' => false,
        'prefix' => false,
        'firstname' => false,
        'middle' => false,
        'lastname' => false,
        'suffix' => false,
        'name' => false,
        'email' => false,
        'domain' => false,
        'picture' => false,
        'type' => false,
        'is_admin' => false,
        'credit_usage' => false,
        'is_importing' => false,
        'sync_status' => false,
        'calendar_sync_status' => false,
        'first_calendar_sync_done' => false,
        'trial_expired' => false,
        'trial_expiry_date' => false,
        'trial_extended' => false,
        'restricted' => false,
        'restricted_reason' => false,
        'team_discount_code' => false,
        'referral_code' => false,
        'referral_reward' => false,
        'is_delinquent' => false,
        'social_profiles' => false,
        'phone_numbers' => false,
        'positions' => false,
        'addresses' => false,
        'tags' => false,
        'intercom_hash' => false,
        'first_day_of_week' => false,
        'am_pm_notation' => false,
        'auto_find_email_linkedin' => false,
        'data_sources_to_reconnect' => false,
        'data_sources' => false,
        'plan_flags' => false,
        'flags' => false,
        'role' => false,
        'call_log_sync_date' => false,
        'two_fa_enabled' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'team' => 'team',
        'group' => 'group',
        'amount_of_trial_days_earned' => 'amount_of_trial_days_earned',
        'has_received_account_suggestions' => 'has_received_account_suggestions',
        'has_archived_contacts' => 'has_archived_contacts',
        'notification_channel_id' => 'notification_channel_id',
        'needs_password' => 'needs_password',
        'disabled' => 'disabled',
        'creation_date' => 'creation_date',
        'modification_date' => 'modification_date',
        'prefix' => 'prefix',
        'firstname' => 'firstname',
        'middle' => 'middle',
        'lastname' => 'lastname',
        'suffix' => 'suffix',
        'name' => 'name',
        'email' => 'email',
        'domain' => 'domain',
        'picture' => 'picture',
        'type' => 'type',
        'is_admin' => 'is_admin',
        'credit_usage' => 'credit_usage',
        'is_importing' => 'is_importing',
        'sync_status' => 'sync_status',
        'calendar_sync_status' => 'calendar_sync_status',
        'first_calendar_sync_done' => 'first_calendar_sync_done',
        'trial_expired' => 'trial_expired',
        'trial_expiry_date' => 'trial_expiry_date',
        'trial_extended' => 'trial_extended',
        'restricted' => 'restricted',
        'restricted_reason' => 'restricted_reason',
        'team_discount_code' => 'team_discount_code',
        'referral_code' => 'referral_code',
        'referral_reward' => 'referral_reward',
        'is_delinquent' => 'is_delinquent',
        'social_profiles' => 'social_profiles',
        'phone_numbers' => 'phone_numbers',
        'positions' => 'positions',
        'addresses' => 'addresses',
        'tags' => 'tags',
        'intercom_hash' => 'intercom_hash',
        'first_day_of_week' => 'first_day_of_week',
        'am_pm_notation' => 'am_pm_notation',
        'auto_find_email_linkedin' => 'auto_find_email_linkedin',
        'data_sources_to_reconnect' => 'data_sources_to_reconnect',
        'data_sources' => 'data_sources',
        'plan_flags' => 'plan_flags',
        'flags' => 'flags',
        'role' => 'role',
        'call_log_sync_date' => 'call_log_sync_date',
        'two_fa_enabled' => 'two_fa_enabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'team' => 'setTeam',
        'group' => 'setGroup',
        'amount_of_trial_days_earned' => 'setAmountOfTrialDaysEarned',
        'has_received_account_suggestions' => 'setHasReceivedAccountSuggestions',
        'has_archived_contacts' => 'setHasArchivedContacts',
        'notification_channel_id' => 'setNotificationChannelId',
        'needs_password' => 'setNeedsPassword',
        'disabled' => 'setDisabled',
        'creation_date' => 'setCreationDate',
        'modification_date' => 'setModificationDate',
        'prefix' => 'setPrefix',
        'firstname' => 'setFirstname',
        'middle' => 'setMiddle',
        'lastname' => 'setLastname',
        'suffix' => 'setSuffix',
        'name' => 'setName',
        'email' => 'setEmail',
        'domain' => 'setDomain',
        'picture' => 'setPicture',
        'type' => 'setType',
        'is_admin' => 'setIsAdmin',
        'credit_usage' => 'setCreditUsage',
        'is_importing' => 'setIsImporting',
        'sync_status' => 'setSyncStatus',
        'calendar_sync_status' => 'setCalendarSyncStatus',
        'first_calendar_sync_done' => 'setFirstCalendarSyncDone',
        'trial_expired' => 'setTrialExpired',
        'trial_expiry_date' => 'setTrialExpiryDate',
        'trial_extended' => 'setTrialExtended',
        'restricted' => 'setRestricted',
        'restricted_reason' => 'setRestrictedReason',
        'team_discount_code' => 'setTeamDiscountCode',
        'referral_code' => 'setReferralCode',
        'referral_reward' => 'setReferralReward',
        'is_delinquent' => 'setIsDelinquent',
        'social_profiles' => 'setSocialProfiles',
        'phone_numbers' => 'setPhoneNumbers',
        'positions' => 'setPositions',
        'addresses' => 'setAddresses',
        'tags' => 'setTags',
        'intercom_hash' => 'setIntercomHash',
        'first_day_of_week' => 'setFirstDayOfWeek',
        'am_pm_notation' => 'setAmPmNotation',
        'auto_find_email_linkedin' => 'setAutoFindEmailLinkedin',
        'data_sources_to_reconnect' => 'setDataSourcesToReconnect',
        'data_sources' => 'setDataSources',
        'plan_flags' => 'setPlanFlags',
        'flags' => 'setFlags',
        'role' => 'setRole',
        'call_log_sync_date' => 'setCallLogSyncDate',
        'two_fa_enabled' => 'setTwoFaEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'team' => 'getTeam',
        'group' => 'getGroup',
        'amount_of_trial_days_earned' => 'getAmountOfTrialDaysEarned',
        'has_received_account_suggestions' => 'getHasReceivedAccountSuggestions',
        'has_archived_contacts' => 'getHasArchivedContacts',
        'notification_channel_id' => 'getNotificationChannelId',
        'needs_password' => 'getNeedsPassword',
        'disabled' => 'getDisabled',
        'creation_date' => 'getCreationDate',
        'modification_date' => 'getModificationDate',
        'prefix' => 'getPrefix',
        'firstname' => 'getFirstname',
        'middle' => 'getMiddle',
        'lastname' => 'getLastname',
        'suffix' => 'getSuffix',
        'name' => 'getName',
        'email' => 'getEmail',
        'domain' => 'getDomain',
        'picture' => 'getPicture',
        'type' => 'getType',
        'is_admin' => 'getIsAdmin',
        'credit_usage' => 'getCreditUsage',
        'is_importing' => 'getIsImporting',
        'sync_status' => 'getSyncStatus',
        'calendar_sync_status' => 'getCalendarSyncStatus',
        'first_calendar_sync_done' => 'getFirstCalendarSyncDone',
        'trial_expired' => 'getTrialExpired',
        'trial_expiry_date' => 'getTrialExpiryDate',
        'trial_extended' => 'getTrialExtended',
        'restricted' => 'getRestricted',
        'restricted_reason' => 'getRestrictedReason',
        'team_discount_code' => 'getTeamDiscountCode',
        'referral_code' => 'getReferralCode',
        'referral_reward' => 'getReferralReward',
        'is_delinquent' => 'getIsDelinquent',
        'social_profiles' => 'getSocialProfiles',
        'phone_numbers' => 'getPhoneNumbers',
        'positions' => 'getPositions',
        'addresses' => 'getAddresses',
        'tags' => 'getTags',
        'intercom_hash' => 'getIntercomHash',
        'first_day_of_week' => 'getFirstDayOfWeek',
        'am_pm_notation' => 'getAmPmNotation',
        'auto_find_email_linkedin' => 'getAutoFindEmailLinkedin',
        'data_sources_to_reconnect' => 'getDataSourcesToReconnect',
        'data_sources' => 'getDataSources',
        'plan_flags' => 'getPlanFlags',
        'flags' => 'getFlags',
        'role' => 'getRole',
        'call_log_sync_date' => 'getCallLogSyncDate',
        'two_fa_enabled' => 'getTwoFaEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('amount_of_trial_days_earned', $data ?? [], null);
        $this->setIfExists('has_received_account_suggestions', $data ?? [], null);
        $this->setIfExists('has_archived_contacts', $data ?? [], null);
        $this->setIfExists('notification_channel_id', $data ?? [], null);
        $this->setIfExists('needs_password', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('modification_date', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('middle', $data ?? [], null);
        $this->setIfExists('lastname', $data ?? [], null);
        $this->setIfExists('suffix', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('is_admin', $data ?? [], null);
        $this->setIfExists('credit_usage', $data ?? [], null);
        $this->setIfExists('is_importing', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
        $this->setIfExists('calendar_sync_status', $data ?? [], null);
        $this->setIfExists('first_calendar_sync_done', $data ?? [], null);
        $this->setIfExists('trial_expired', $data ?? [], null);
        $this->setIfExists('trial_expiry_date', $data ?? [], null);
        $this->setIfExists('trial_extended', $data ?? [], null);
        $this->setIfExists('restricted', $data ?? [], null);
        $this->setIfExists('restricted_reason', $data ?? [], null);
        $this->setIfExists('team_discount_code', $data ?? [], null);
        $this->setIfExists('referral_code', $data ?? [], null);
        $this->setIfExists('referral_reward', $data ?? [], null);
        $this->setIfExists('is_delinquent', $data ?? [], null);
        $this->setIfExists('social_profiles', $data ?? [], null);
        $this->setIfExists('phone_numbers', $data ?? [], null);
        $this->setIfExists('positions', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('intercom_hash', $data ?? [], null);
        $this->setIfExists('first_day_of_week', $data ?? [], null);
        $this->setIfExists('am_pm_notation', $data ?? [], null);
        $this->setIfExists('auto_find_email_linkedin', $data ?? [], null);
        $this->setIfExists('data_sources_to_reconnect', $data ?? [], null);
        $this->setIfExists('data_sources', $data ?? [], null);
        $this->setIfExists('plan_flags', $data ?? [], null);
        $this->setIfExists('flags', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('call_log_sync_date', $data ?? [], null);
        $this->setIfExists('two_fa_enabled', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseTeam|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseTeam|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets group
     *
     * @return float|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param float|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets amount_of_trial_days_earned
     *
     * @return float|null
     */
    public function getAmountOfTrialDaysEarned()
    {
        return $this->container['amount_of_trial_days_earned'];
    }

    /**
     * Sets amount_of_trial_days_earned
     *
     * @param float|null $amount_of_trial_days_earned amount_of_trial_days_earned
     *
     * @return self
     */
    public function setAmountOfTrialDaysEarned($amount_of_trial_days_earned)
    {
        if (is_null($amount_of_trial_days_earned)) {
            throw new \InvalidArgumentException('non-nullable amount_of_trial_days_earned cannot be null');
        }
        $this->container['amount_of_trial_days_earned'] = $amount_of_trial_days_earned;

        return $this;
    }

    /**
     * Gets has_received_account_suggestions
     *
     * @return bool|null
     */
    public function getHasReceivedAccountSuggestions()
    {
        return $this->container['has_received_account_suggestions'];
    }

    /**
     * Sets has_received_account_suggestions
     *
     * @param bool|null $has_received_account_suggestions has_received_account_suggestions
     *
     * @return self
     */
    public function setHasReceivedAccountSuggestions($has_received_account_suggestions)
    {
        if (is_null($has_received_account_suggestions)) {
            throw new \InvalidArgumentException('non-nullable has_received_account_suggestions cannot be null');
        }
        $this->container['has_received_account_suggestions'] = $has_received_account_suggestions;

        return $this;
    }

    /**
     * Gets has_archived_contacts
     *
     * @return bool|null
     */
    public function getHasArchivedContacts()
    {
        return $this->container['has_archived_contacts'];
    }

    /**
     * Sets has_archived_contacts
     *
     * @param bool|null $has_archived_contacts has_archived_contacts
     *
     * @return self
     */
    public function setHasArchivedContacts($has_archived_contacts)
    {
        if (is_null($has_archived_contacts)) {
            throw new \InvalidArgumentException('non-nullable has_archived_contacts cannot be null');
        }
        $this->container['has_archived_contacts'] = $has_archived_contacts;

        return $this;
    }

    /**
     * Gets notification_channel_id
     *
     * @return string|null
     */
    public function getNotificationChannelId()
    {
        return $this->container['notification_channel_id'];
    }

    /**
     * Sets notification_channel_id
     *
     * @param string|null $notification_channel_id notification_channel_id
     *
     * @return self
     */
    public function setNotificationChannelId($notification_channel_id)
    {
        if (is_null($notification_channel_id)) {
            throw new \InvalidArgumentException('non-nullable notification_channel_id cannot be null');
        }
        $this->container['notification_channel_id'] = $notification_channel_id;

        return $this;
    }

    /**
     * Gets needs_password
     *
     * @return bool|null
     */
    public function getNeedsPassword()
    {
        return $this->container['needs_password'];
    }

    /**
     * Sets needs_password
     *
     * @param bool|null $needs_password needs_password
     *
     * @return self
     */
    public function setNeedsPassword($needs_password)
    {
        if (is_null($needs_password)) {
            throw new \InvalidArgumentException('non-nullable needs_password cannot be null');
        }
        $this->container['needs_password'] = $needs_password;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled disabled
     *
     * @return self
     */
    public function setDisabled($disabled)
    {
        if (is_null($disabled)) {
            throw new \InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets modification_date
     *
     * @return \DateTime|null
     */
    public function getModificationDate()
    {
        return $this->container['modification_date'];
    }

    /**
     * Sets modification_date
     *
     * @param \DateTime|null $modification_date modification_date
     *
     * @return self
     */
    public function setModificationDate($modification_date)
    {
        if (is_null($modification_date)) {
            throw new \InvalidArgumentException('non-nullable modification_date cannot be null');
        }
        $this->container['modification_date'] = $modification_date;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix prefix
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets middle
     *
     * @return string|null
     */
    public function getMiddle()
    {
        return $this->container['middle'];
    }

    /**
     * Sets middle
     *
     * @param string|null $middle middle
     *
     * @return self
     */
    public function setMiddle($middle)
    {
        if (is_null($middle)) {
            throw new \InvalidArgumentException('non-nullable middle cannot be null');
        }
        $this->container['middle'] = $middle;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname lastname
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            throw new \InvalidArgumentException('non-nullable lastname cannot be null');
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return string|null
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param string|null $suffix suffix
     *
     * @return self
     */
    public function setSuffix($suffix)
    {
        if (is_null($suffix)) {
            throw new \InvalidArgumentException('non-nullable suffix cannot be null');
        }
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture picture
     *
     * @return self
     */
    public function setPicture($picture)
    {
        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets is_admin
     *
     * @return bool|null
     */
    public function getIsAdmin()
    {
        return $this->container['is_admin'];
    }

    /**
     * Sets is_admin
     *
     * @param bool|null $is_admin is_admin
     *
     * @return self
     */
    public function setIsAdmin($is_admin)
    {
        if (is_null($is_admin)) {
            throw new \InvalidArgumentException('non-nullable is_admin cannot be null');
        }
        $this->container['is_admin'] = $is_admin;

        return $this;
    }

    /**
     * Gets credit_usage
     *
     * @return float|null
     */
    public function getCreditUsage()
    {
        return $this->container['credit_usage'];
    }

    /**
     * Sets credit_usage
     *
     * @param float|null $credit_usage credit_usage
     *
     * @return self
     */
    public function setCreditUsage($credit_usage)
    {
        if (is_null($credit_usage)) {
            throw new \InvalidArgumentException('non-nullable credit_usage cannot be null');
        }
        $this->container['credit_usage'] = $credit_usage;

        return $this;
    }

    /**
     * Gets is_importing
     *
     * @return bool|null
     */
    public function getIsImporting()
    {
        return $this->container['is_importing'];
    }

    /**
     * Sets is_importing
     *
     * @param bool|null $is_importing is_importing
     *
     * @return self
     */
    public function setIsImporting($is_importing)
    {
        if (is_null($is_importing)) {
            throw new \InvalidArgumentException('non-nullable is_importing cannot be null');
        }
        $this->container['is_importing'] = $is_importing;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return string|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param string|null $sync_status sync_status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {
        if (is_null($sync_status)) {
            throw new \InvalidArgumentException('non-nullable sync_status cannot be null');
        }
        $this->container['sync_status'] = $sync_status;

        return $this;
    }

    /**
     * Gets calendar_sync_status
     *
     * @return string|null
     */
    public function getCalendarSyncStatus()
    {
        return $this->container['calendar_sync_status'];
    }

    /**
     * Sets calendar_sync_status
     *
     * @param string|null $calendar_sync_status calendar_sync_status
     *
     * @return self
     */
    public function setCalendarSyncStatus($calendar_sync_status)
    {
        if (is_null($calendar_sync_status)) {
            throw new \InvalidArgumentException('non-nullable calendar_sync_status cannot be null');
        }
        $this->container['calendar_sync_status'] = $calendar_sync_status;

        return $this;
    }

    /**
     * Gets first_calendar_sync_done
     *
     * @return bool|null
     */
    public function getFirstCalendarSyncDone()
    {
        return $this->container['first_calendar_sync_done'];
    }

    /**
     * Sets first_calendar_sync_done
     *
     * @param bool|null $first_calendar_sync_done first_calendar_sync_done
     *
     * @return self
     */
    public function setFirstCalendarSyncDone($first_calendar_sync_done)
    {
        if (is_null($first_calendar_sync_done)) {
            throw new \InvalidArgumentException('non-nullable first_calendar_sync_done cannot be null');
        }
        $this->container['first_calendar_sync_done'] = $first_calendar_sync_done;

        return $this;
    }

    /**
     * Gets trial_expired
     *
     * @return bool|null
     */
    public function getTrialExpired()
    {
        return $this->container['trial_expired'];
    }

    /**
     * Sets trial_expired
     *
     * @param bool|null $trial_expired trial_expired
     *
     * @return self
     */
    public function setTrialExpired($trial_expired)
    {
        if (is_null($trial_expired)) {
            throw new \InvalidArgumentException('non-nullable trial_expired cannot be null');
        }
        $this->container['trial_expired'] = $trial_expired;

        return $this;
    }

    /**
     * Gets trial_expiry_date
     *
     * @return \DateTime|null
     */
    public function getTrialExpiryDate()
    {
        return $this->container['trial_expiry_date'];
    }

    /**
     * Sets trial_expiry_date
     *
     * @param \DateTime|null $trial_expiry_date trial_expiry_date
     *
     * @return self
     */
    public function setTrialExpiryDate($trial_expiry_date)
    {
        if (is_null($trial_expiry_date)) {
            throw new \InvalidArgumentException('non-nullable trial_expiry_date cannot be null');
        }
        $this->container['trial_expiry_date'] = $trial_expiry_date;

        return $this;
    }

    /**
     * Gets trial_extended
     *
     * @return bool|null
     */
    public function getTrialExtended()
    {
        return $this->container['trial_extended'];
    }

    /**
     * Sets trial_extended
     *
     * @param bool|null $trial_extended trial_extended
     *
     * @return self
     */
    public function setTrialExtended($trial_extended)
    {
        if (is_null($trial_extended)) {
            throw new \InvalidArgumentException('non-nullable trial_extended cannot be null');
        }
        $this->container['trial_extended'] = $trial_extended;

        return $this;
    }

    /**
     * Gets restricted
     *
     * @return bool|null
     */
    public function getRestricted()
    {
        return $this->container['restricted'];
    }

    /**
     * Sets restricted
     *
     * @param bool|null $restricted restricted
     *
     * @return self
     */
    public function setRestricted($restricted)
    {
        if (is_null($restricted)) {
            throw new \InvalidArgumentException('non-nullable restricted cannot be null');
        }
        $this->container['restricted'] = $restricted;

        return $this;
    }

    /**
     * Gets restricted_reason
     *
     * @return string|null
     */
    public function getRestrictedReason()
    {
        return $this->container['restricted_reason'];
    }

    /**
     * Sets restricted_reason
     *
     * @param string|null $restricted_reason restricted_reason
     *
     * @return self
     */
    public function setRestrictedReason($restricted_reason)
    {
        if (is_null($restricted_reason)) {
            throw new \InvalidArgumentException('non-nullable restricted_reason cannot be null');
        }
        $this->container['restricted_reason'] = $restricted_reason;

        return $this;
    }

    /**
     * Gets team_discount_code
     *
     * @return string|null
     */
    public function getTeamDiscountCode()
    {
        return $this->container['team_discount_code'];
    }

    /**
     * Sets team_discount_code
     *
     * @param string|null $team_discount_code team_discount_code
     *
     * @return self
     */
    public function setTeamDiscountCode($team_discount_code)
    {
        if (is_null($team_discount_code)) {
            throw new \InvalidArgumentException('non-nullable team_discount_code cannot be null');
        }
        $this->container['team_discount_code'] = $team_discount_code;

        return $this;
    }

    /**
     * Gets referral_code
     *
     * @return string|null
     */
    public function getReferralCode()
    {
        return $this->container['referral_code'];
    }

    /**
     * Sets referral_code
     *
     * @param string|null $referral_code referral_code
     *
     * @return self
     */
    public function setReferralCode($referral_code)
    {
        if (is_null($referral_code)) {
            throw new \InvalidArgumentException('non-nullable referral_code cannot be null');
        }
        $this->container['referral_code'] = $referral_code;

        return $this;
    }

    /**
     * Gets referral_reward
     *
     * @return float|null
     */
    public function getReferralReward()
    {
        return $this->container['referral_reward'];
    }

    /**
     * Sets referral_reward
     *
     * @param float|null $referral_reward referral_reward
     *
     * @return self
     */
    public function setReferralReward($referral_reward)
    {
        if (is_null($referral_reward)) {
            throw new \InvalidArgumentException('non-nullable referral_reward cannot be null');
        }
        $this->container['referral_reward'] = $referral_reward;

        return $this;
    }

    /**
     * Gets is_delinquent
     *
     * @return bool|null
     */
    public function getIsDelinquent()
    {
        return $this->container['is_delinquent'];
    }

    /**
     * Sets is_delinquent
     *
     * @param bool|null $is_delinquent is_delinquent
     *
     * @return self
     */
    public function setIsDelinquent($is_delinquent)
    {
        if (is_null($is_delinquent)) {
            throw new \InvalidArgumentException('non-nullable is_delinquent cannot be null');
        }
        $this->container['is_delinquent'] = $is_delinquent;

        return $this;
    }

    /**
     * Gets social_profiles
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseSocialProfilesInner[]|null
     */
    public function getSocialProfiles()
    {
        return $this->container['social_profiles'];
    }

    /**
     * Sets social_profiles
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseSocialProfilesInner[]|null $social_profiles social_profiles
     *
     * @return self
     */
    public function setSocialProfiles($social_profiles)
    {
        if (is_null($social_profiles)) {
            throw new \InvalidArgumentException('non-nullable social_profiles cannot be null');
        }
        $this->container['social_profiles'] = $social_profiles;

        return $this;
    }

    /**
     * Gets phone_numbers
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponsePhoneNumbersInner[]|null
     */
    public function getPhoneNumbers()
    {
        return $this->container['phone_numbers'];
    }

    /**
     * Sets phone_numbers
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponsePhoneNumbersInner[]|null $phone_numbers phone_numbers
     *
     * @return self
     */
    public function setPhoneNumbers($phone_numbers)
    {
        if (is_null($phone_numbers)) {
            throw new \InvalidArgumentException('non-nullable phone_numbers cannot be null');
        }
        $this->container['phone_numbers'] = $phone_numbers;

        return $this;
    }

    /**
     * Gets positions
     *
     * @return \OpenAPI\Client\Model\GetContacts200ResponseInnerPositionsInner[]|null
     */
    public function getPositions()
    {
        return $this->container['positions'];
    }

    /**
     * Sets positions
     *
     * @param \OpenAPI\Client\Model\GetContacts200ResponseInnerPositionsInner[]|null $positions positions
     *
     * @return self
     */
    public function setPositions($positions)
    {
        if (is_null($positions)) {
            throw new \InvalidArgumentException('non-nullable positions cannot be null');
        }
        $this->container['positions'] = $positions;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return object[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param object[]|null $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return object[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param object[]|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets intercom_hash
     *
     * @return string|null
     */
    public function getIntercomHash()
    {
        return $this->container['intercom_hash'];
    }

    /**
     * Sets intercom_hash
     *
     * @param string|null $intercom_hash intercom_hash
     *
     * @return self
     */
    public function setIntercomHash($intercom_hash)
    {
        if (is_null($intercom_hash)) {
            throw new \InvalidArgumentException('non-nullable intercom_hash cannot be null');
        }
        $this->container['intercom_hash'] = $intercom_hash;

        return $this;
    }

    /**
     * Gets first_day_of_week
     *
     * @return float|null
     */
    public function getFirstDayOfWeek()
    {
        return $this->container['first_day_of_week'];
    }

    /**
     * Sets first_day_of_week
     *
     * @param float|null $first_day_of_week first_day_of_week
     *
     * @return self
     */
    public function setFirstDayOfWeek($first_day_of_week)
    {
        if (is_null($first_day_of_week)) {
            throw new \InvalidArgumentException('non-nullable first_day_of_week cannot be null');
        }
        $this->container['first_day_of_week'] = $first_day_of_week;

        return $this;
    }

    /**
     * Gets am_pm_notation
     *
     * @return bool|null
     */
    public function getAmPmNotation()
    {
        return $this->container['am_pm_notation'];
    }

    /**
     * Sets am_pm_notation
     *
     * @param bool|null $am_pm_notation am_pm_notation
     *
     * @return self
     */
    public function setAmPmNotation($am_pm_notation)
    {
        if (is_null($am_pm_notation)) {
            throw new \InvalidArgumentException('non-nullable am_pm_notation cannot be null');
        }
        $this->container['am_pm_notation'] = $am_pm_notation;

        return $this;
    }

    /**
     * Gets auto_find_email_linkedin
     *
     * @return bool|null
     */
    public function getAutoFindEmailLinkedin()
    {
        return $this->container['auto_find_email_linkedin'];
    }

    /**
     * Sets auto_find_email_linkedin
     *
     * @param bool|null $auto_find_email_linkedin auto_find_email_linkedin
     *
     * @return self
     */
    public function setAutoFindEmailLinkedin($auto_find_email_linkedin)
    {
        if (is_null($auto_find_email_linkedin)) {
            throw new \InvalidArgumentException('non-nullable auto_find_email_linkedin cannot be null');
        }
        $this->container['auto_find_email_linkedin'] = $auto_find_email_linkedin;

        return $this;
    }

    /**
     * Gets data_sources_to_reconnect
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseDataSourcesToReconnectInner[]|null
     */
    public function getDataSourcesToReconnect()
    {
        return $this->container['data_sources_to_reconnect'];
    }

    /**
     * Sets data_sources_to_reconnect
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseDataSourcesToReconnectInner[]|null $data_sources_to_reconnect data_sources_to_reconnect
     *
     * @return self
     */
    public function setDataSourcesToReconnect($data_sources_to_reconnect)
    {
        if (is_null($data_sources_to_reconnect)) {
            throw new \InvalidArgumentException('non-nullable data_sources_to_reconnect cannot be null');
        }
        $this->container['data_sources_to_reconnect'] = $data_sources_to_reconnect;

        return $this;
    }

    /**
     * Gets data_sources
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseDataSourcesInner[]|null
     */
    public function getDataSources()
    {
        return $this->container['data_sources'];
    }

    /**
     * Sets data_sources
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseDataSourcesInner[]|null $data_sources data_sources
     *
     * @return self
     */
    public function setDataSources($data_sources)
    {
        if (is_null($data_sources)) {
            throw new \InvalidArgumentException('non-nullable data_sources cannot be null');
        }
        $this->container['data_sources'] = $data_sources;

        return $this;
    }

    /**
     * Gets plan_flags
     *
     * @return object|null
     */
    public function getPlanFlags()
    {
        return $this->container['plan_flags'];
    }

    /**
     * Sets plan_flags
     *
     * @param object|null $plan_flags plan_flags
     *
     * @return self
     */
    public function setPlanFlags($plan_flags)
    {
        if (is_null($plan_flags)) {
            throw new \InvalidArgumentException('non-nullable plan_flags cannot be null');
        }
        $this->container['plan_flags'] = $plan_flags;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseFlagsInner[]|null
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseFlagsInner[]|null $flags flags
     *
     * @return self
     */
    public function setFlags($flags)
    {
        if (is_null($flags)) {
            throw new \InvalidArgumentException('non-nullable flags cannot be null');
        }
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseRole|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseRole|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets call_log_sync_date
     *
     * @return \DateTime|null
     */
    public function getCallLogSyncDate()
    {
        return $this->container['call_log_sync_date'];
    }

    /**
     * Sets call_log_sync_date
     *
     * @param \DateTime|null $call_log_sync_date call_log_sync_date
     *
     * @return self
     */
    public function setCallLogSyncDate($call_log_sync_date)
    {
        if (is_null($call_log_sync_date)) {
            throw new \InvalidArgumentException('non-nullable call_log_sync_date cannot be null');
        }
        $this->container['call_log_sync_date'] = $call_log_sync_date;

        return $this;
    }

    /**
     * Gets two_fa_enabled
     *
     * @return bool|null
     */
    public function getTwoFaEnabled()
    {
        return $this->container['two_fa_enabled'];
    }

    /**
     * Sets two_fa_enabled
     *
     * @param bool|null $two_fa_enabled two_fa_enabled
     *
     * @return self
     */
    public function setTwoFaEnabled($two_fa_enabled)
    {
        if (is_null($two_fa_enabled)) {
            throw new \InvalidArgumentException('non-nullable two_fa_enabled cannot be null');
        }
        $this->container['two_fa_enabled'] = $two_fa_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


