<?php
/**
 * GetMe200ResponseTeam
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Salesflare API
 *
 * # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salesflare.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetMe200ResponseTeam Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetMe200ResponseTeam implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getMe_200_response_team';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'float',
        'name' => 'string',
        'tracking_token' => 'string',
        'days_until_account_inactive' => 'float',
        'total_user_count' => 'float',
        'enabled_user_count' => 'float',
        'paid_user_count' => 'float',
        'free_users' => 'float',
        'subscribed' => 'bool',
        'payment_type' => 'string',
        'discount_code' => 'string',
        'discount_type' => 'string',
        'promo_description' => 'string',
        'promo_redeem_by' => '\DateTime',
        'promo_code' => 'string',
        'plan' => 'float',
        'currency' => '\OpenAPI\Client\Model\GetMe200ResponseTeamCurrency',
        'billing_currency' => '\OpenAPI\Client\Model\GetMe200ResponseTeamCurrency',
        'billing_frequency' => 'string',
        'creation_date' => '\DateTime',
        'time_zone' => 'string',
        'stripe_customer_id' => 'string',
        'campaign' => 'string',
        'is_referred' => 'bool',
        'credit_usage' => 'float',
        'credit_quota' => 'float',
        'credit_package' => 'string',
        'email_tracking_subdomain' => 'string',
        'email_tracking_domain' => '\OpenAPI\Client\Model\GetMe200ResponseTeamEmailTrackingDomain',
        'automated_tagging' => 'bool',
        'domain' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'tracking_token' => null,
        'days_until_account_inactive' => null,
        'total_user_count' => null,
        'enabled_user_count' => null,
        'paid_user_count' => null,
        'free_users' => null,
        'subscribed' => null,
        'payment_type' => null,
        'discount_code' => null,
        'discount_type' => null,
        'promo_description' => null,
        'promo_redeem_by' => 'date-time',
        'promo_code' => null,
        'plan' => null,
        'currency' => null,
        'billing_currency' => null,
        'billing_frequency' => null,
        'creation_date' => 'date-time',
        'time_zone' => null,
        'stripe_customer_id' => null,
        'campaign' => null,
        'is_referred' => null,
        'credit_usage' => null,
        'credit_quota' => null,
        'credit_package' => null,
        'email_tracking_subdomain' => null,
        'email_tracking_domain' => null,
        'automated_tagging' => null,
        'domain' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'tracking_token' => false,
        'days_until_account_inactive' => false,
        'total_user_count' => false,
        'enabled_user_count' => false,
        'paid_user_count' => false,
        'free_users' => false,
        'subscribed' => false,
        'payment_type' => false,
        'discount_code' => false,
        'discount_type' => false,
        'promo_description' => false,
        'promo_redeem_by' => false,
        'promo_code' => false,
        'plan' => false,
        'currency' => false,
        'billing_currency' => false,
        'billing_frequency' => false,
        'creation_date' => false,
        'time_zone' => false,
        'stripe_customer_id' => false,
        'campaign' => false,
        'is_referred' => false,
        'credit_usage' => false,
        'credit_quota' => false,
        'credit_package' => false,
        'email_tracking_subdomain' => false,
        'email_tracking_domain' => false,
        'automated_tagging' => false,
        'domain' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'tracking_token' => 'tracking_token',
        'days_until_account_inactive' => 'days_until_account_inactive',
        'total_user_count' => 'total_user_count',
        'enabled_user_count' => 'enabled_user_count',
        'paid_user_count' => 'paid_user_count',
        'free_users' => 'free_users',
        'subscribed' => 'subscribed',
        'payment_type' => 'payment_type',
        'discount_code' => 'discount_code',
        'discount_type' => 'discount_type',
        'promo_description' => 'promo_description',
        'promo_redeem_by' => 'promo_redeem_by',
        'promo_code' => 'promo_code',
        'plan' => 'plan',
        'currency' => 'currency',
        'billing_currency' => 'billing_currency',
        'billing_frequency' => 'billing_frequency',
        'creation_date' => 'creation_date',
        'time_zone' => 'time_zone',
        'stripe_customer_id' => 'stripe_customer_id',
        'campaign' => 'campaign',
        'is_referred' => 'is_referred',
        'credit_usage' => 'credit_usage',
        'credit_quota' => 'credit_quota',
        'credit_package' => 'credit_package',
        'email_tracking_subdomain' => 'email_tracking_subdomain',
        'email_tracking_domain' => 'email_tracking_domain',
        'automated_tagging' => 'automated_tagging',
        'domain' => 'domain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'tracking_token' => 'setTrackingToken',
        'days_until_account_inactive' => 'setDaysUntilAccountInactive',
        'total_user_count' => 'setTotalUserCount',
        'enabled_user_count' => 'setEnabledUserCount',
        'paid_user_count' => 'setPaidUserCount',
        'free_users' => 'setFreeUsers',
        'subscribed' => 'setSubscribed',
        'payment_type' => 'setPaymentType',
        'discount_code' => 'setDiscountCode',
        'discount_type' => 'setDiscountType',
        'promo_description' => 'setPromoDescription',
        'promo_redeem_by' => 'setPromoRedeemBy',
        'promo_code' => 'setPromoCode',
        'plan' => 'setPlan',
        'currency' => 'setCurrency',
        'billing_currency' => 'setBillingCurrency',
        'billing_frequency' => 'setBillingFrequency',
        'creation_date' => 'setCreationDate',
        'time_zone' => 'setTimeZone',
        'stripe_customer_id' => 'setStripeCustomerId',
        'campaign' => 'setCampaign',
        'is_referred' => 'setIsReferred',
        'credit_usage' => 'setCreditUsage',
        'credit_quota' => 'setCreditQuota',
        'credit_package' => 'setCreditPackage',
        'email_tracking_subdomain' => 'setEmailTrackingSubdomain',
        'email_tracking_domain' => 'setEmailTrackingDomain',
        'automated_tagging' => 'setAutomatedTagging',
        'domain' => 'setDomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'tracking_token' => 'getTrackingToken',
        'days_until_account_inactive' => 'getDaysUntilAccountInactive',
        'total_user_count' => 'getTotalUserCount',
        'enabled_user_count' => 'getEnabledUserCount',
        'paid_user_count' => 'getPaidUserCount',
        'free_users' => 'getFreeUsers',
        'subscribed' => 'getSubscribed',
        'payment_type' => 'getPaymentType',
        'discount_code' => 'getDiscountCode',
        'discount_type' => 'getDiscountType',
        'promo_description' => 'getPromoDescription',
        'promo_redeem_by' => 'getPromoRedeemBy',
        'promo_code' => 'getPromoCode',
        'plan' => 'getPlan',
        'currency' => 'getCurrency',
        'billing_currency' => 'getBillingCurrency',
        'billing_frequency' => 'getBillingFrequency',
        'creation_date' => 'getCreationDate',
        'time_zone' => 'getTimeZone',
        'stripe_customer_id' => 'getStripeCustomerId',
        'campaign' => 'getCampaign',
        'is_referred' => 'getIsReferred',
        'credit_usage' => 'getCreditUsage',
        'credit_quota' => 'getCreditQuota',
        'credit_package' => 'getCreditPackage',
        'email_tracking_subdomain' => 'getEmailTrackingSubdomain',
        'email_tracking_domain' => 'getEmailTrackingDomain',
        'automated_tagging' => 'getAutomatedTagging',
        'domain' => 'getDomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const PAYMENT_TYPE_STRIPE = 'stripe';
    public const PAYMENT_TYPE_FREE = 'free';
    public const PAYMENT_TYPE_APPSTACK = 'appstack';
    public const BILLING_FREQUENCY_MONTHLY = 'monthly';
    public const BILLING_FREQUENCY_ANNUALLY = 'annually';
    public const CREDIT_PACKAGE_S = 'S';
    public const CREDIT_PACKAGE_M = 'M';
    public const CREDIT_PACKAGE_L = 'L';
    public const CREDIT_PACKAGE_XL = 'XL';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentTypeAllowableValues()
    {
        return [
            self::PAYMENT_TYPE_STRIPE,
            self::PAYMENT_TYPE_FREE,
            self::PAYMENT_TYPE_APPSTACK,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingFrequencyAllowableValues()
    {
        return [
            self::BILLING_FREQUENCY_MONTHLY,
            self::BILLING_FREQUENCY_ANNUALLY,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreditPackageAllowableValues()
    {
        return [
            self::CREDIT_PACKAGE_S,
            self::CREDIT_PACKAGE_M,
            self::CREDIT_PACKAGE_L,
            self::CREDIT_PACKAGE_XL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tracking_token', $data ?? [], null);
        $this->setIfExists('days_until_account_inactive', $data ?? [], null);
        $this->setIfExists('total_user_count', $data ?? [], null);
        $this->setIfExists('enabled_user_count', $data ?? [], null);
        $this->setIfExists('paid_user_count', $data ?? [], null);
        $this->setIfExists('free_users', $data ?? [], null);
        $this->setIfExists('subscribed', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('discount_code', $data ?? [], null);
        $this->setIfExists('discount_type', $data ?? [], null);
        $this->setIfExists('promo_description', $data ?? [], null);
        $this->setIfExists('promo_redeem_by', $data ?? [], null);
        $this->setIfExists('promo_code', $data ?? [], null);
        $this->setIfExists('plan', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('billing_currency', $data ?? [], null);
        $this->setIfExists('billing_frequency', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('time_zone', $data ?? [], null);
        $this->setIfExists('stripe_customer_id', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
        $this->setIfExists('is_referred', $data ?? [], null);
        $this->setIfExists('credit_usage', $data ?? [], null);
        $this->setIfExists('credit_quota', $data ?? [], null);
        $this->setIfExists('credit_package', $data ?? [], null);
        $this->setIfExists('email_tracking_subdomain', $data ?? [], null);
        $this->setIfExists('email_tracking_domain', $data ?? [], null);
        $this->setIfExists('automated_tagging', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!is_null($this->container['payment_type']) && !in_array($this->container['payment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_type', must be one of '%s'",
                $this->container['payment_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBillingFrequencyAllowableValues();
        if (!is_null($this->container['billing_frequency']) && !in_array($this->container['billing_frequency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'billing_frequency', must be one of '%s'",
                $this->container['billing_frequency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCreditPackageAllowableValues();
        if (!is_null($this->container['credit_package']) && !in_array($this->container['credit_package'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'credit_package', must be one of '%s'",
                $this->container['credit_package'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tracking_token
     *
     * @return string|null
     */
    public function getTrackingToken()
    {
        return $this->container['tracking_token'];
    }

    /**
     * Sets tracking_token
     *
     * @param string|null $tracking_token tracking_token
     *
     * @return self
     */
    public function setTrackingToken($tracking_token)
    {
        if (is_null($tracking_token)) {
            throw new \InvalidArgumentException('non-nullable tracking_token cannot be null');
        }
        $this->container['tracking_token'] = $tracking_token;

        return $this;
    }

    /**
     * Gets days_until_account_inactive
     *
     * @return float|null
     */
    public function getDaysUntilAccountInactive()
    {
        return $this->container['days_until_account_inactive'];
    }

    /**
     * Sets days_until_account_inactive
     *
     * @param float|null $days_until_account_inactive days_until_account_inactive
     *
     * @return self
     */
    public function setDaysUntilAccountInactive($days_until_account_inactive)
    {
        if (is_null($days_until_account_inactive)) {
            throw new \InvalidArgumentException('non-nullable days_until_account_inactive cannot be null');
        }
        $this->container['days_until_account_inactive'] = $days_until_account_inactive;

        return $this;
    }

    /**
     * Gets total_user_count
     *
     * @return float|null
     */
    public function getTotalUserCount()
    {
        return $this->container['total_user_count'];
    }

    /**
     * Sets total_user_count
     *
     * @param float|null $total_user_count total_user_count
     *
     * @return self
     */
    public function setTotalUserCount($total_user_count)
    {
        if (is_null($total_user_count)) {
            throw new \InvalidArgumentException('non-nullable total_user_count cannot be null');
        }
        $this->container['total_user_count'] = $total_user_count;

        return $this;
    }

    /**
     * Gets enabled_user_count
     *
     * @return float|null
     */
    public function getEnabledUserCount()
    {
        return $this->container['enabled_user_count'];
    }

    /**
     * Sets enabled_user_count
     *
     * @param float|null $enabled_user_count enabled_user_count
     *
     * @return self
     */
    public function setEnabledUserCount($enabled_user_count)
    {
        if (is_null($enabled_user_count)) {
            throw new \InvalidArgumentException('non-nullable enabled_user_count cannot be null');
        }
        $this->container['enabled_user_count'] = $enabled_user_count;

        return $this;
    }

    /**
     * Gets paid_user_count
     *
     * @return float|null
     */
    public function getPaidUserCount()
    {
        return $this->container['paid_user_count'];
    }

    /**
     * Sets paid_user_count
     *
     * @param float|null $paid_user_count paid_user_count
     *
     * @return self
     */
    public function setPaidUserCount($paid_user_count)
    {
        if (is_null($paid_user_count)) {
            throw new \InvalidArgumentException('non-nullable paid_user_count cannot be null');
        }
        $this->container['paid_user_count'] = $paid_user_count;

        return $this;
    }

    /**
     * Gets free_users
     *
     * @return float|null
     */
    public function getFreeUsers()
    {
        return $this->container['free_users'];
    }

    /**
     * Sets free_users
     *
     * @param float|null $free_users free_users
     *
     * @return self
     */
    public function setFreeUsers($free_users)
    {
        if (is_null($free_users)) {
            throw new \InvalidArgumentException('non-nullable free_users cannot be null');
        }
        $this->container['free_users'] = $free_users;

        return $this;
    }

    /**
     * Gets subscribed
     *
     * @return bool|null
     */
    public function getSubscribed()
    {
        return $this->container['subscribed'];
    }

    /**
     * Sets subscribed
     *
     * @param bool|null $subscribed subscribed
     *
     * @return self
     */
    public function setSubscribed($subscribed)
    {
        if (is_null($subscribed)) {
            throw new \InvalidArgumentException('non-nullable subscribed cannot be null');
        }
        $this->container['subscribed'] = $subscribed;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $allowedValues = $this->getPaymentTypeAllowableValues();
        if (!in_array($payment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_type', must be one of '%s'",
                    $payment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets discount_code
     *
     * @return string|null
     */
    public function getDiscountCode()
    {
        return $this->container['discount_code'];
    }

    /**
     * Sets discount_code
     *
     * @param string|null $discount_code discount_code
     *
     * @return self
     */
    public function setDiscountCode($discount_code)
    {
        if (is_null($discount_code)) {
            throw new \InvalidArgumentException('non-nullable discount_code cannot be null');
        }
        $this->container['discount_code'] = $discount_code;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return string|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param string|null $discount_type discount_type
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        if (is_null($discount_type)) {
            throw new \InvalidArgumentException('non-nullable discount_type cannot be null');
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets promo_description
     *
     * @return string|null
     */
    public function getPromoDescription()
    {
        return $this->container['promo_description'];
    }

    /**
     * Sets promo_description
     *
     * @param string|null $promo_description promo_description
     *
     * @return self
     */
    public function setPromoDescription($promo_description)
    {
        if (is_null($promo_description)) {
            throw new \InvalidArgumentException('non-nullable promo_description cannot be null');
        }
        $this->container['promo_description'] = $promo_description;

        return $this;
    }

    /**
     * Gets promo_redeem_by
     *
     * @return \DateTime|null
     */
    public function getPromoRedeemBy()
    {
        return $this->container['promo_redeem_by'];
    }

    /**
     * Sets promo_redeem_by
     *
     * @param \DateTime|null $promo_redeem_by promo_redeem_by
     *
     * @return self
     */
    public function setPromoRedeemBy($promo_redeem_by)
    {
        if (is_null($promo_redeem_by)) {
            throw new \InvalidArgumentException('non-nullable promo_redeem_by cannot be null');
        }
        $this->container['promo_redeem_by'] = $promo_redeem_by;

        return $this;
    }

    /**
     * Gets promo_code
     *
     * @return string|null
     */
    public function getPromoCode()
    {
        return $this->container['promo_code'];
    }

    /**
     * Sets promo_code
     *
     * @param string|null $promo_code promo_code
     *
     * @return self
     */
    public function setPromoCode($promo_code)
    {
        if (is_null($promo_code)) {
            throw new \InvalidArgumentException('non-nullable promo_code cannot be null');
        }
        $this->container['promo_code'] = $promo_code;

        return $this;
    }

    /**
     * Gets plan
     *
     * @return float|null
     */
    public function getPlan()
    {
        return $this->container['plan'];
    }

    /**
     * Sets plan
     *
     * @param float|null $plan plan
     *
     * @return self
     */
    public function setPlan($plan)
    {
        if (is_null($plan)) {
            throw new \InvalidArgumentException('non-nullable plan cannot be null');
        }
        $this->container['plan'] = $plan;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseTeamCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseTeamCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets billing_currency
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseTeamCurrency|null
     */
    public function getBillingCurrency()
    {
        return $this->container['billing_currency'];
    }

    /**
     * Sets billing_currency
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseTeamCurrency|null $billing_currency billing_currency
     *
     * @return self
     */
    public function setBillingCurrency($billing_currency)
    {
        if (is_null($billing_currency)) {
            throw new \InvalidArgumentException('non-nullable billing_currency cannot be null');
        }
        $this->container['billing_currency'] = $billing_currency;

        return $this;
    }

    /**
     * Gets billing_frequency
     *
     * @return string|null
     */
    public function getBillingFrequency()
    {
        return $this->container['billing_frequency'];
    }

    /**
     * Sets billing_frequency
     *
     * @param string|null $billing_frequency billing_frequency
     *
     * @return self
     */
    public function setBillingFrequency($billing_frequency)
    {
        if (is_null($billing_frequency)) {
            throw new \InvalidArgumentException('non-nullable billing_frequency cannot be null');
        }
        $allowedValues = $this->getBillingFrequencyAllowableValues();
        if (!in_array($billing_frequency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'billing_frequency', must be one of '%s'",
                    $billing_frequency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_frequency'] = $billing_frequency;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string|null
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string|null $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        if (is_null($time_zone)) {
            throw new \InvalidArgumentException('non-nullable time_zone cannot be null');
        }
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets stripe_customer_id
     *
     * @return string|null
     */
    public function getStripeCustomerId()
    {
        return $this->container['stripe_customer_id'];
    }

    /**
     * Sets stripe_customer_id
     *
     * @param string|null $stripe_customer_id stripe_customer_id
     *
     * @return self
     */
    public function setStripeCustomerId($stripe_customer_id)
    {
        if (is_null($stripe_customer_id)) {
            throw new \InvalidArgumentException('non-nullable stripe_customer_id cannot be null');
        }
        $this->container['stripe_customer_id'] = $stripe_customer_id;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return string|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param string|null $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets is_referred
     *
     * @return bool|null
     */
    public function getIsReferred()
    {
        return $this->container['is_referred'];
    }

    /**
     * Sets is_referred
     *
     * @param bool|null $is_referred is_referred
     *
     * @return self
     */
    public function setIsReferred($is_referred)
    {
        if (is_null($is_referred)) {
            throw new \InvalidArgumentException('non-nullable is_referred cannot be null');
        }
        $this->container['is_referred'] = $is_referred;

        return $this;
    }

    /**
     * Gets credit_usage
     *
     * @return float|null
     */
    public function getCreditUsage()
    {
        return $this->container['credit_usage'];
    }

    /**
     * Sets credit_usage
     *
     * @param float|null $credit_usage credit_usage
     *
     * @return self
     */
    public function setCreditUsage($credit_usage)
    {
        if (is_null($credit_usage)) {
            throw new \InvalidArgumentException('non-nullable credit_usage cannot be null');
        }
        $this->container['credit_usage'] = $credit_usage;

        return $this;
    }

    /**
     * Gets credit_quota
     *
     * @return float|null
     */
    public function getCreditQuota()
    {
        return $this->container['credit_quota'];
    }

    /**
     * Sets credit_quota
     *
     * @param float|null $credit_quota credit_quota
     *
     * @return self
     */
    public function setCreditQuota($credit_quota)
    {
        if (is_null($credit_quota)) {
            throw new \InvalidArgumentException('non-nullable credit_quota cannot be null');
        }
        $this->container['credit_quota'] = $credit_quota;

        return $this;
    }

    /**
     * Gets credit_package
     *
     * @return string|null
     */
    public function getCreditPackage()
    {
        return $this->container['credit_package'];
    }

    /**
     * Sets credit_package
     *
     * @param string|null $credit_package credit_package
     *
     * @return self
     */
    public function setCreditPackage($credit_package)
    {
        if (is_null($credit_package)) {
            throw new \InvalidArgumentException('non-nullable credit_package cannot be null');
        }
        $allowedValues = $this->getCreditPackageAllowableValues();
        if (!in_array($credit_package, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'credit_package', must be one of '%s'",
                    $credit_package,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['credit_package'] = $credit_package;

        return $this;
    }

    /**
     * Gets email_tracking_subdomain
     *
     * @return string|null
     */
    public function getEmailTrackingSubdomain()
    {
        return $this->container['email_tracking_subdomain'];
    }

    /**
     * Sets email_tracking_subdomain
     *
     * @param string|null $email_tracking_subdomain email_tracking_subdomain
     *
     * @return self
     */
    public function setEmailTrackingSubdomain($email_tracking_subdomain)
    {
        if (is_null($email_tracking_subdomain)) {
            throw new \InvalidArgumentException('non-nullable email_tracking_subdomain cannot be null');
        }
        $this->container['email_tracking_subdomain'] = $email_tracking_subdomain;

        return $this;
    }

    /**
     * Gets email_tracking_domain
     *
     * @return \OpenAPI\Client\Model\GetMe200ResponseTeamEmailTrackingDomain|null
     */
    public function getEmailTrackingDomain()
    {
        return $this->container['email_tracking_domain'];
    }

    /**
     * Sets email_tracking_domain
     *
     * @param \OpenAPI\Client\Model\GetMe200ResponseTeamEmailTrackingDomain|null $email_tracking_domain email_tracking_domain
     *
     * @return self
     */
    public function setEmailTrackingDomain($email_tracking_domain)
    {
        if (is_null($email_tracking_domain)) {
            throw new \InvalidArgumentException('non-nullable email_tracking_domain cannot be null');
        }
        $this->container['email_tracking_domain'] = $email_tracking_domain;

        return $this;
    }

    /**
     * Gets automated_tagging
     *
     * @return bool|null
     */
    public function getAutomatedTagging()
    {
        return $this->container['automated_tagging'];
    }

    /**
     * Sets automated_tagging
     *
     * @param bool|null $automated_tagging automated_tagging
     *
     * @return self
     */
    public function setAutomatedTagging($automated_tagging)
    {
        if (is_null($automated_tagging)) {
            throw new \InvalidArgumentException('non-nullable automated_tagging cannot be null');
        }
        $this->container['automated_tagging'] = $automated_tagging;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }
        $this->container['domain'] = $domain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


