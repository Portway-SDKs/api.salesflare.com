<?php
/**
 * ContactsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Salesflare API
 *
 * # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@salesflare.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ContactsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ContactsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getContacts' => [
            'application/json',
        ],
        'postContacts' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getContacts
     *
     * List contacts
     *
     * @param  float[] $id id (optional)
     * @param  string $name name (optional)
     * @param  string $email email (optional)
     * @param  string $phone_number phone_number (optional)
     * @param  string $domain domain (optional)
     * @param  \DateTime $modification_after modification_after (optional)
     * @param  \DateTime $modification_before modification_before (optional)
     * @param  \DateTime $creation_after creation_after (optional)
     * @param  \DateTime $creation_before creation_before (optional)
     * @param  float[] $account account (optional)
     * @param  float[] $tag tag (optional)
     * @param  string[] $tag_name tag_name (optional)
     * @param  string[] $position_role position_role (optional)
     * @param  string[] $address_country address_country (optional)
     * @param  string[] $address_state_region address_state_region (optional)
     * @param  string[] $address_city address_city (optional)
     * @param  bool $include_archived include_archived (optional)
     * @param  string $search search (optional)
     * @param  string $type type (optional)
     * @param  float $limit limit (optional, default to 20.0)
     * @param  float $offset offset (optional, default to 0.0)
     * @param  string $custom custom (optional)
     * @param  string[] $order_by Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     * @param  string $q q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetContacts200ResponseInner[]
     */
    public function getContacts($id = null, $name = null, $email = null, $phone_number = null, $domain = null, $modification_after = null, $modification_before = null, $creation_after = null, $creation_before = null, $account = null, $tag = null, $tag_name = null, $position_role = null, $address_country = null, $address_state_region = null, $address_city = null, $include_archived = null, $search = null, $type = null, $limit = 20.0, $offset = 0.0, $custom = null, $order_by = null, $q = null, string $contentType = self::contentTypes['getContacts'][0])
    {
        list($response) = $this->getContactsWithHttpInfo($id, $name, $email, $phone_number, $domain, $modification_after, $modification_before, $creation_after, $creation_before, $account, $tag, $tag_name, $position_role, $address_country, $address_state_region, $address_city, $include_archived, $search, $type, $limit, $offset, $custom, $order_by, $q, $contentType);
        return $response;
    }

    /**
     * Operation getContactsWithHttpInfo
     *
     * List contacts
     *
     * @param  float[] $id (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $phone_number (optional)
     * @param  string $domain (optional)
     * @param  \DateTime $modification_after (optional)
     * @param  \DateTime $modification_before (optional)
     * @param  \DateTime $creation_after (optional)
     * @param  \DateTime $creation_before (optional)
     * @param  float[] $account (optional)
     * @param  float[] $tag (optional)
     * @param  string[] $tag_name (optional)
     * @param  string[] $position_role (optional)
     * @param  string[] $address_country (optional)
     * @param  string[] $address_state_region (optional)
     * @param  string[] $address_city (optional)
     * @param  bool $include_archived (optional)
     * @param  string $search (optional)
     * @param  string $type (optional)
     * @param  float $limit (optional, default to 20.0)
     * @param  float $offset (optional, default to 0.0)
     * @param  string $custom (optional)
     * @param  string[] $order_by Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetContacts200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getContactsWithHttpInfo($id = null, $name = null, $email = null, $phone_number = null, $domain = null, $modification_after = null, $modification_before = null, $creation_after = null, $creation_before = null, $account = null, $tag = null, $tag_name = null, $position_role = null, $address_country = null, $address_state_region = null, $address_city = null, $include_archived = null, $search = null, $type = null, $limit = 20.0, $offset = 0.0, $custom = null, $order_by = null, $q = null, string $contentType = self::contentTypes['getContacts'][0])
    {
        $request = $this->getContactsRequest($id, $name, $email, $phone_number, $domain, $modification_after, $modification_before, $creation_after, $creation_before, $account, $tag, $tag_name, $position_role, $address_country, $address_state_region, $address_city, $include_archived, $search, $type, $limit, $offset, $custom, $order_by, $q, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetContacts200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetContacts200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetContacts200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetContacts200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetContacts200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContactsAsync
     *
     * List contacts
     *
     * @param  float[] $id (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $phone_number (optional)
     * @param  string $domain (optional)
     * @param  \DateTime $modification_after (optional)
     * @param  \DateTime $modification_before (optional)
     * @param  \DateTime $creation_after (optional)
     * @param  \DateTime $creation_before (optional)
     * @param  float[] $account (optional)
     * @param  float[] $tag (optional)
     * @param  string[] $tag_name (optional)
     * @param  string[] $position_role (optional)
     * @param  string[] $address_country (optional)
     * @param  string[] $address_state_region (optional)
     * @param  string[] $address_city (optional)
     * @param  bool $include_archived (optional)
     * @param  string $search (optional)
     * @param  string $type (optional)
     * @param  float $limit (optional, default to 20.0)
     * @param  float $offset (optional, default to 0.0)
     * @param  string $custom (optional)
     * @param  string[] $order_by Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactsAsync($id = null, $name = null, $email = null, $phone_number = null, $domain = null, $modification_after = null, $modification_before = null, $creation_after = null, $creation_before = null, $account = null, $tag = null, $tag_name = null, $position_role = null, $address_country = null, $address_state_region = null, $address_city = null, $include_archived = null, $search = null, $type = null, $limit = 20.0, $offset = 0.0, $custom = null, $order_by = null, $q = null, string $contentType = self::contentTypes['getContacts'][0])
    {
        return $this->getContactsAsyncWithHttpInfo($id, $name, $email, $phone_number, $domain, $modification_after, $modification_before, $creation_after, $creation_before, $account, $tag, $tag_name, $position_role, $address_country, $address_state_region, $address_city, $include_archived, $search, $type, $limit, $offset, $custom, $order_by, $q, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContactsAsyncWithHttpInfo
     *
     * List contacts
     *
     * @param  float[] $id (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $phone_number (optional)
     * @param  string $domain (optional)
     * @param  \DateTime $modification_after (optional)
     * @param  \DateTime $modification_before (optional)
     * @param  \DateTime $creation_after (optional)
     * @param  \DateTime $creation_before (optional)
     * @param  float[] $account (optional)
     * @param  float[] $tag (optional)
     * @param  string[] $tag_name (optional)
     * @param  string[] $position_role (optional)
     * @param  string[] $address_country (optional)
     * @param  string[] $address_state_region (optional)
     * @param  string[] $address_city (optional)
     * @param  bool $include_archived (optional)
     * @param  string $search (optional)
     * @param  string $type (optional)
     * @param  float $limit (optional, default to 20.0)
     * @param  float $offset (optional, default to 0.0)
     * @param  string $custom (optional)
     * @param  string[] $order_by Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContactsAsyncWithHttpInfo($id = null, $name = null, $email = null, $phone_number = null, $domain = null, $modification_after = null, $modification_before = null, $creation_after = null, $creation_before = null, $account = null, $tag = null, $tag_name = null, $position_role = null, $address_country = null, $address_state_region = null, $address_city = null, $include_archived = null, $search = null, $type = null, $limit = 20.0, $offset = 0.0, $custom = null, $order_by = null, $q = null, string $contentType = self::contentTypes['getContacts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetContacts200ResponseInner[]';
        $request = $this->getContactsRequest($id, $name, $email, $phone_number, $domain, $modification_after, $modification_before, $creation_after, $creation_before, $account, $tag, $tag_name, $position_role, $address_country, $address_state_region, $address_city, $include_archived, $search, $type, $limit, $offset, $custom, $order_by, $q, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContacts'
     *
     * @param  float[] $id (optional)
     * @param  string $name (optional)
     * @param  string $email (optional)
     * @param  string $phone_number (optional)
     * @param  string $domain (optional)
     * @param  \DateTime $modification_after (optional)
     * @param  \DateTime $modification_before (optional)
     * @param  \DateTime $creation_after (optional)
     * @param  \DateTime $creation_before (optional)
     * @param  float[] $account (optional)
     * @param  float[] $tag (optional)
     * @param  string[] $tag_name (optional)
     * @param  string[] $position_role (optional)
     * @param  string[] $address_country (optional)
     * @param  string[] $address_state_region (optional)
     * @param  string[] $address_city (optional)
     * @param  bool $include_archived (optional)
     * @param  string $search (optional)
     * @param  string $type (optional)
     * @param  float $limit (optional, default to 20.0)
     * @param  float $offset (optional, default to 0.0)
     * @param  string $custom (optional)
     * @param  string[] $order_by Can be just &#39;key&#39; e.g. &#39;name&#39; or &#39;key sortOrder&#39; e.g. &#39;name desc&#39;. Defaults to asc. (optional)
     * @param  string $q (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getContactsRequest($id = null, $name = null, $email = null, $phone_number = null, $domain = null, $modification_after = null, $modification_before = null, $creation_after = null, $creation_before = null, $account = null, $tag = null, $tag_name = null, $position_role = null, $address_country = null, $address_state_region = null, $address_city = null, $include_archived = null, $search = null, $type = null, $limit = 20.0, $offset = 0.0, $custom = null, $order_by = null, $q = null, string $contentType = self::contentTypes['getContacts'][0])
    {




















        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling ContactsApi.getContacts, must be bigger than or equal to 1.');
        }
        





        $resourcePath = '/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone_number,
            'phone_number', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $domain,
            'domain', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modification_after,
            'modification_after', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $modification_before,
            'modification_before', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_after,
            'creation_after', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_before,
            'creation_before', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account,
            'account', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag_name,
            'tag.name', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $position_role,
            'position.role', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_country,
            'address.country', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_state_region,
            'address.state_region', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $address_city,
            'address.city', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_archived,
            'includeArchived', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'number', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom,
            'custom', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'order_by', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContacts
     *
     * Create a contact
     *
     * @param  bool $force When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     * @param  \OpenAPI\Client\Model\PostContactsRequestInner[] $body body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PostContacts200ResponseInner[]
     */
    public function postContacts($force = true, $body = null, string $contentType = self::contentTypes['postContacts'][0])
    {
        list($response) = $this->postContactsWithHttpInfo($force, $body, $contentType);
        return $response;
    }

    /**
     * Operation postContactsWithHttpInfo
     *
     * Create a contact
     *
     * @param  bool $force When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     * @param  \OpenAPI\Client\Model\PostContactsRequestInner[] $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContacts'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PostContacts200ResponseInner[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postContactsWithHttpInfo($force = true, $body = null, string $contentType = self::contentTypes['postContacts'][0])
    {
        $request = $this->postContactsRequest($force, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PostContacts200ResponseInner[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PostContacts200ResponseInner[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PostContacts200ResponseInner[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PostContacts200ResponseInner[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PostContacts200ResponseInner[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContactsAsync
     *
     * Create a contact
     *
     * @param  bool $force When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     * @param  \OpenAPI\Client\Model\PostContactsRequestInner[] $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContactsAsync($force = true, $body = null, string $contentType = self::contentTypes['postContacts'][0])
    {
        return $this->postContactsAsyncWithHttpInfo($force, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContactsAsyncWithHttpInfo
     *
     * Create a contact
     *
     * @param  bool $force When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     * @param  \OpenAPI\Client\Model\PostContactsRequestInner[] $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContactsAsyncWithHttpInfo($force = true, $body = null, string $contentType = self::contentTypes['postContacts'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PostContacts200ResponseInner[]';
        $request = $this->postContactsRequest($force, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContacts'
     *
     * @param  bool $force When force is false, the contact will not be created if a contact with the same email address used to exist. (optional, default to true)
     * @param  \OpenAPI\Client\Model\PostContactsRequestInner[] $body (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postContacts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postContactsRequest($force = true, $body = null, string $contentType = self::contentTypes['postContacts'][0])
    {




        $resourcePath = '/contacts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
