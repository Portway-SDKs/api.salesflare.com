# coding: utf-8

"""
    Salesflare API

    # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

    The version of the OpenAPI document: 1.0.0
    Contact: support@salesflare.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from salesflare.models.get_contacts200_response_inner_account import GetContacts200ResponseInnerAccount
from salesflare.models.get_contacts200_response_inner_addresses_inner import GetContacts200ResponseInnerAddressesInner
from salesflare.models.get_contacts200_response_inner_owner import GetContacts200ResponseInnerOwner
from salesflare.models.get_contacts200_response_inner_phone_numbers_inner import GetContacts200ResponseInnerPhoneNumbersInner
from salesflare.models.get_contacts200_response_inner_positions_inner import GetContacts200ResponseInnerPositionsInner
from salesflare.models.get_contacts200_response_inner_social_profiles_inner import GetContacts200ResponseInnerSocialProfilesInner
from salesflare.models.get_contacts200_response_inner_tags_inner import GetContacts200ResponseInnerTagsInner
from typing import Optional, Set
from typing_extensions import Self

class GetContacts200ResponseInner(BaseModel):
    """
    GetContacts200ResponseInner
    """ # noqa: E501
    account: Optional[GetContacts200ResponseInnerAccount] = None
    id: Union[StrictFloat, StrictInt]
    prefix: Optional[StrictStr] = None
    firstname: Optional[StrictStr] = None
    middle: Optional[StrictStr] = None
    lastname: Optional[StrictStr] = None
    suffix: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    email: Optional[Annotated[str, Field(strict=True, max_length=1000)]] = None
    domain: Optional[StrictStr] = None
    birth_date: Optional[StrictStr] = None
    opt_out: Optional[StrictBool] = Field(default=None, alias="opt-out")
    opt_out_date: Optional[datetime] = Field(default=None, alias="opt-out_date")
    opt_out_campaign: Optional[StrictStr] = Field(default=None, alias="opt-out_campaign")
    bounced: Optional[StrictBool] = None
    bounced_date: Optional[datetime] = None
    files: Optional[List[Dict[str, Any]]] = None
    owner: Optional[GetContacts200ResponseInnerOwner] = None
    picture: Optional[StrictStr] = None
    archived: Optional[StrictBool] = None
    not_viewed: Optional[StrictBool] = None
    can_edit: Optional[StrictBool] = None
    creation_date: Optional[datetime] = None
    modification_date: Optional[datetime] = None
    type: Optional[StrictStr] = None
    tags: Optional[List[GetContacts200ResponseInnerTagsInner]] = None
    addresses: Optional[List[GetContacts200ResponseInnerAddressesInner]] = None
    phone_number: Optional[StrictStr] = None
    mobile_phone_number: Optional[StrictStr] = None
    home_phone_number: Optional[StrictStr] = None
    fax_number: Optional[StrictStr] = None
    phone_numbers: Optional[List[GetContacts200ResponseInnerPhoneNumbersInner]] = None
    positions: Optional[List[GetContacts200ResponseInnerPositionsInner]] = None
    social_profiles: Optional[List[GetContacts200ResponseInnerSocialProfilesInner]] = None
    organisation: Optional[StrictStr] = None
    role: Optional[StrictStr] = None
    custom: Optional[Dict[str, Any]] = None
    last_email_date: Optional[datetime] = None
    last_meeting_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["account", "id", "prefix", "firstname", "middle", "lastname", "suffix", "name", "email", "domain", "birth_date", "opt-out", "opt-out_date", "opt-out_campaign", "bounced", "bounced_date", "files", "owner", "picture", "archived", "not_viewed", "can_edit", "creation_date", "modification_date", "type", "tags", "addresses", "phone_number", "mobile_phone_number", "home_phone_number", "fax_number", "phone_numbers", "positions", "social_profiles", "organisation", "role", "custom", "last_email_date", "last_meeting_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetContacts200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item in self.phone_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['phone_numbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item in self.positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['positions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in social_profiles (list)
        _items = []
        if self.social_profiles:
            for _item in self.social_profiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['social_profiles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetContacts200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": GetContacts200ResponseInnerAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "id": obj.get("id"),
            "prefix": obj.get("prefix"),
            "firstname": obj.get("firstname"),
            "middle": obj.get("middle"),
            "lastname": obj.get("lastname"),
            "suffix": obj.get("suffix"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "domain": obj.get("domain"),
            "birth_date": obj.get("birth_date"),
            "opt-out": obj.get("opt-out"),
            "opt-out_date": obj.get("opt-out_date"),
            "opt-out_campaign": obj.get("opt-out_campaign"),
            "bounced": obj.get("bounced"),
            "bounced_date": obj.get("bounced_date"),
            "files": obj.get("files"),
            "owner": GetContacts200ResponseInnerOwner.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "picture": obj.get("picture"),
            "archived": obj.get("archived"),
            "not_viewed": obj.get("not_viewed"),
            "can_edit": obj.get("can_edit"),
            "creation_date": obj.get("creation_date"),
            "modification_date": obj.get("modification_date"),
            "type": obj.get("type"),
            "tags": [GetContacts200ResponseInnerTagsInner.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "addresses": [GetContacts200ResponseInnerAddressesInner.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "phone_number": obj.get("phone_number"),
            "mobile_phone_number": obj.get("mobile_phone_number"),
            "home_phone_number": obj.get("home_phone_number"),
            "fax_number": obj.get("fax_number"),
            "phone_numbers": [GetContacts200ResponseInnerPhoneNumbersInner.from_dict(_item) for _item in obj["phone_numbers"]] if obj.get("phone_numbers") is not None else None,
            "positions": [GetContacts200ResponseInnerPositionsInner.from_dict(_item) for _item in obj["positions"]] if obj.get("positions") is not None else None,
            "social_profiles": [GetContacts200ResponseInnerSocialProfilesInner.from_dict(_item) for _item in obj["social_profiles"]] if obj.get("social_profiles") is not None else None,
            "organisation": obj.get("organisation"),
            "role": obj.get("role"),
            "custom": obj.get("custom"),
            "last_email_date": obj.get("last_email_date"),
            "last_meeting_date": obj.get("last_meeting_date")
        })
        return _obj


