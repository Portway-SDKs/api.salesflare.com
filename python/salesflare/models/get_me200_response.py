# coding: utf-8

"""
    Salesflare API

    # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

    The version of the OpenAPI document: 1.0.0
    Contact: support@salesflare.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from salesflare.models.get_contacts200_response_inner_positions_inner import GetContacts200ResponseInnerPositionsInner
from salesflare.models.get_me200_response_data_sources_inner import GetMe200ResponseDataSourcesInner
from salesflare.models.get_me200_response_data_sources_to_reconnect_inner import GetMe200ResponseDataSourcesToReconnectInner
from salesflare.models.get_me200_response_flags_inner import GetMe200ResponseFlagsInner
from salesflare.models.get_me200_response_phone_numbers_inner import GetMe200ResponsePhoneNumbersInner
from salesflare.models.get_me200_response_role import GetMe200ResponseRole
from salesflare.models.get_me200_response_social_profiles_inner import GetMe200ResponseSocialProfilesInner
from salesflare.models.get_me200_response_team import GetMe200ResponseTeam
from typing import Optional, Set
from typing_extensions import Self

class GetMe200Response(BaseModel):
    """
    GetMe200Response
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    team: Optional[GetMe200ResponseTeam] = None
    group: Optional[Union[StrictFloat, StrictInt]] = None
    amount_of_trial_days_earned: Optional[Union[StrictFloat, StrictInt]] = None
    has_received_account_suggestions: Optional[StrictBool] = None
    has_archived_contacts: Optional[StrictBool] = None
    notification_channel_id: Optional[StrictStr] = None
    needs_password: Optional[StrictBool] = None
    disabled: Optional[StrictBool] = None
    creation_date: Optional[datetime] = None
    modification_date: Optional[datetime] = None
    prefix: Optional[StrictStr] = None
    firstname: Optional[StrictStr] = None
    middle: Optional[StrictStr] = None
    lastname: Optional[StrictStr] = None
    suffix: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    picture: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    is_admin: Optional[StrictBool] = None
    credit_usage: Optional[Union[StrictFloat, StrictInt]] = None
    is_importing: Optional[StrictBool] = None
    sync_status: Optional[StrictStr] = None
    calendar_sync_status: Optional[StrictStr] = None
    first_calendar_sync_done: Optional[StrictBool] = None
    trial_expired: Optional[StrictBool] = None
    trial_expiry_date: Optional[datetime] = None
    trial_extended: Optional[StrictBool] = None
    restricted: Optional[StrictBool] = None
    restricted_reason: Optional[StrictStr] = None
    team_discount_code: Optional[StrictStr] = None
    referral_code: Optional[StrictStr] = None
    referral_reward: Optional[Union[StrictFloat, StrictInt]] = None
    is_delinquent: Optional[StrictBool] = None
    social_profiles: Optional[List[GetMe200ResponseSocialProfilesInner]] = None
    phone_numbers: Optional[List[GetMe200ResponsePhoneNumbersInner]] = None
    positions: Optional[List[GetContacts200ResponseInnerPositionsInner]] = None
    addresses: Optional[List[Dict[str, Any]]] = None
    tags: Optional[List[Dict[str, Any]]] = None
    intercom_hash: Optional[StrictStr] = None
    first_day_of_week: Optional[Union[StrictFloat, StrictInt]] = None
    am_pm_notation: Optional[StrictBool] = None
    auto_find_email_linkedin: Optional[StrictBool] = None
    data_sources_to_reconnect: Optional[List[GetMe200ResponseDataSourcesToReconnectInner]] = None
    data_sources: Optional[List[GetMe200ResponseDataSourcesInner]] = None
    plan_flags: Optional[Dict[str, Any]] = None
    flags: Optional[List[GetMe200ResponseFlagsInner]] = None
    role: Optional[GetMe200ResponseRole] = None
    call_log_sync_date: Optional[datetime] = None
    two_fa_enabled: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "team", "group", "amount_of_trial_days_earned", "has_received_account_suggestions", "has_archived_contacts", "notification_channel_id", "needs_password", "disabled", "creation_date", "modification_date", "prefix", "firstname", "middle", "lastname", "suffix", "name", "email", "domain", "picture", "type", "is_admin", "credit_usage", "is_importing", "sync_status", "calendar_sync_status", "first_calendar_sync_done", "trial_expired", "trial_expiry_date", "trial_extended", "restricted", "restricted_reason", "team_discount_code", "referral_code", "referral_reward", "is_delinquent", "social_profiles", "phone_numbers", "positions", "addresses", "tags", "intercom_hash", "first_day_of_week", "am_pm_notation", "auto_find_email_linkedin", "data_sources_to_reconnect", "data_sources", "plan_flags", "flags", "role", "call_log_sync_date", "two_fa_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMe200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in social_profiles (list)
        _items = []
        if self.social_profiles:
            for _item in self.social_profiles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['social_profiles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in phone_numbers (list)
        _items = []
        if self.phone_numbers:
            for _item in self.phone_numbers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['phone_numbers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item in self.positions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['positions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_sources_to_reconnect (list)
        _items = []
        if self.data_sources_to_reconnect:
            for _item in self.data_sources_to_reconnect:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data_sources_to_reconnect'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in data_sources (list)
        _items = []
        if self.data_sources:
            for _item in self.data_sources:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data_sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in flags (list)
        _items = []
        if self.flags:
            for _item in self.flags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['flags'] = _items
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMe200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "team": GetMe200ResponseTeam.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "group": obj.get("group"),
            "amount_of_trial_days_earned": obj.get("amount_of_trial_days_earned"),
            "has_received_account_suggestions": obj.get("has_received_account_suggestions"),
            "has_archived_contacts": obj.get("has_archived_contacts"),
            "notification_channel_id": obj.get("notification_channel_id"),
            "needs_password": obj.get("needs_password"),
            "disabled": obj.get("disabled"),
            "creation_date": obj.get("creation_date"),
            "modification_date": obj.get("modification_date"),
            "prefix": obj.get("prefix"),
            "firstname": obj.get("firstname"),
            "middle": obj.get("middle"),
            "lastname": obj.get("lastname"),
            "suffix": obj.get("suffix"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "domain": obj.get("domain"),
            "picture": obj.get("picture"),
            "type": obj.get("type"),
            "is_admin": obj.get("is_admin"),
            "credit_usage": obj.get("credit_usage"),
            "is_importing": obj.get("is_importing"),
            "sync_status": obj.get("sync_status"),
            "calendar_sync_status": obj.get("calendar_sync_status"),
            "first_calendar_sync_done": obj.get("first_calendar_sync_done"),
            "trial_expired": obj.get("trial_expired"),
            "trial_expiry_date": obj.get("trial_expiry_date"),
            "trial_extended": obj.get("trial_extended"),
            "restricted": obj.get("restricted"),
            "restricted_reason": obj.get("restricted_reason"),
            "team_discount_code": obj.get("team_discount_code"),
            "referral_code": obj.get("referral_code"),
            "referral_reward": obj.get("referral_reward"),
            "is_delinquent": obj.get("is_delinquent"),
            "social_profiles": [GetMe200ResponseSocialProfilesInner.from_dict(_item) for _item in obj["social_profiles"]] if obj.get("social_profiles") is not None else None,
            "phone_numbers": [GetMe200ResponsePhoneNumbersInner.from_dict(_item) for _item in obj["phone_numbers"]] if obj.get("phone_numbers") is not None else None,
            "positions": [GetContacts200ResponseInnerPositionsInner.from_dict(_item) for _item in obj["positions"]] if obj.get("positions") is not None else None,
            "addresses": obj.get("addresses"),
            "tags": obj.get("tags"),
            "intercom_hash": obj.get("intercom_hash"),
            "first_day_of_week": obj.get("first_day_of_week"),
            "am_pm_notation": obj.get("am_pm_notation"),
            "auto_find_email_linkedin": obj.get("auto_find_email_linkedin"),
            "data_sources_to_reconnect": [GetMe200ResponseDataSourcesToReconnectInner.from_dict(_item) for _item in obj["data_sources_to_reconnect"]] if obj.get("data_sources_to_reconnect") is not None else None,
            "data_sources": [GetMe200ResponseDataSourcesInner.from_dict(_item) for _item in obj["data_sources"]] if obj.get("data_sources") is not None else None,
            "plan_flags": obj.get("plan_flags"),
            "flags": [GetMe200ResponseFlagsInner.from_dict(_item) for _item in obj["flags"]] if obj.get("flags") is not None else None,
            "role": GetMe200ResponseRole.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "call_log_sync_date": obj.get("call_log_sync_date"),
            "two_fa_enabled": obj.get("two_fa_enabled")
        })
        return _obj


