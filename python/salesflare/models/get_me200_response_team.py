# coding: utf-8

"""
    Salesflare API

    # Introduction  ## Getting Started  The Salesflare API allows you to access and build your own applications or integrations that interact with Salesflare.  The Salesflare API provides a RESTful interface with JSON-formatted responses to access most Salesflare resources.  ## Authentication  The Salesflare API uses bearer token based authentication, which means you need to use the key-value pair \"Authorization : Bearer APIKEY\" in the header to authenticate.  You can make an API key in [\"Settings\" > \"API keys\"](https://app.salesflare.com/#/settings/apikeys).  Click on the large orange \"+\" button on the bottom right of the screen to create an API key.  ![Screenshot API Key Settings](https://lib.salesflare.com/api_docs/screenshot_settings_apikeys.png)  ## Requests  All requests must be sent using HTTPS with TLS 1.2 or higher. Please make sure your developer tools support this version of TLS as older versions or SSL are not supported for security reasons.  For PUT or POST requests (e.g. create, update), the payload must be provided as JSON in the request body.  ## Responses  Responses use HTTP status codes, with the most typical ones being:  | Code                   | Meaning               | |------------------------|-----------------------| | Successful Responses                           | | 200                    | OK                    | | Error Responses                                | | 400                    | Bad Request           | | 401                    | Unauthorized          | | 404                    | Not Found             | | 429                    | Too Many Requests     | | 500                    | Internal Server Error |  ## Testing  We recommend testing our API with Postman.  ### Download specification  Our API is documented following the OpenAPI specification. You can download it [here](https://api.salesflare.com/openapi.json)  ### Import in Postman  To import the collection, open Postman and click Import, then select \"Import From Link\"  Copy & Paste the following link and press the \"Import\" button:  > https://api.salesflare.com/openapi.json  ![Screenshot Postman Import](https://lib.salesflare.com/api_docs/screenshot_postman_import.png)  ## Support  For API questions and support, please email support@salesflare.com or click the chat bubble below.

    The version of the OpenAPI document: 1.0.0
    Contact: support@salesflare.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from salesflare.models.get_me200_response_team_currency import GetMe200ResponseTeamCurrency
from salesflare.models.get_me200_response_team_email_tracking_domain import GetMe200ResponseTeamEmailTrackingDomain
from typing import Optional, Set
from typing_extensions import Self

class GetMe200ResponseTeam(BaseModel):
    """
    GetMe200ResponseTeam
    """ # noqa: E501
    id: Optional[Union[StrictFloat, StrictInt]] = None
    name: Optional[StrictStr] = None
    tracking_token: Optional[StrictStr] = None
    days_until_account_inactive: Optional[Union[StrictFloat, StrictInt]] = None
    total_user_count: Optional[Union[StrictFloat, StrictInt]] = None
    enabled_user_count: Optional[Union[StrictFloat, StrictInt]] = None
    paid_user_count: Optional[Union[StrictFloat, StrictInt]] = None
    free_users: Optional[Union[StrictFloat, StrictInt]] = None
    subscribed: Optional[StrictBool] = None
    payment_type: Optional[StrictStr] = None
    discount_code: Optional[StrictStr] = None
    discount_type: Optional[StrictStr] = None
    promo_description: Optional[StrictStr] = None
    promo_redeem_by: Optional[datetime] = None
    promo_code: Optional[StrictStr] = None
    plan: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[GetMe200ResponseTeamCurrency] = None
    billing_currency: Optional[GetMe200ResponseTeamCurrency] = None
    billing_frequency: Optional[StrictStr] = None
    creation_date: Optional[datetime] = None
    time_zone: Optional[StrictStr] = None
    stripe_customer_id: Optional[StrictStr] = None
    campaign: Optional[StrictStr] = None
    is_referred: Optional[StrictBool] = None
    credit_usage: Optional[Union[StrictFloat, StrictInt]] = None
    credit_quota: Optional[Union[StrictFloat, StrictInt]] = None
    credit_package: Optional[StrictStr] = None
    email_tracking_subdomain: Optional[StrictStr] = None
    email_tracking_domain: Optional[GetMe200ResponseTeamEmailTrackingDomain] = None
    automated_tagging: Optional[StrictBool] = None
    domain: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "tracking_token", "days_until_account_inactive", "total_user_count", "enabled_user_count", "paid_user_count", "free_users", "subscribed", "payment_type", "discount_code", "discount_type", "promo_description", "promo_redeem_by", "promo_code", "plan", "currency", "billing_currency", "billing_frequency", "creation_date", "time_zone", "stripe_customer_id", "campaign", "is_referred", "credit_usage", "credit_quota", "credit_package", "email_tracking_subdomain", "email_tracking_domain", "automated_tagging", "domain"]

    @field_validator('payment_type')
    def payment_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['stripe', 'free', 'appstack']):
            raise ValueError("must be one of enum values ('stripe', 'free', 'appstack')")
        return value

    @field_validator('billing_frequency')
    def billing_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['monthly', 'annually']):
            raise ValueError("must be one of enum values ('monthly', 'annually')")
        return value

    @field_validator('credit_package')
    def credit_package_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['S', 'M', 'L', 'XL']):
            raise ValueError("must be one of enum values ('S', 'M', 'L', 'XL')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMe200ResponseTeam from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of currency
        if self.currency:
            _dict['currency'] = self.currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing_currency
        if self.billing_currency:
            _dict['billing_currency'] = self.billing_currency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_tracking_domain
        if self.email_tracking_domain:
            _dict['email_tracking_domain'] = self.email_tracking_domain.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMe200ResponseTeam from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "tracking_token": obj.get("tracking_token"),
            "days_until_account_inactive": obj.get("days_until_account_inactive"),
            "total_user_count": obj.get("total_user_count"),
            "enabled_user_count": obj.get("enabled_user_count"),
            "paid_user_count": obj.get("paid_user_count"),
            "free_users": obj.get("free_users"),
            "subscribed": obj.get("subscribed"),
            "payment_type": obj.get("payment_type"),
            "discount_code": obj.get("discount_code"),
            "discount_type": obj.get("discount_type"),
            "promo_description": obj.get("promo_description"),
            "promo_redeem_by": obj.get("promo_redeem_by"),
            "promo_code": obj.get("promo_code"),
            "plan": obj.get("plan"),
            "currency": GetMe200ResponseTeamCurrency.from_dict(obj["currency"]) if obj.get("currency") is not None else None,
            "billing_currency": GetMe200ResponseTeamCurrency.from_dict(obj["billing_currency"]) if obj.get("billing_currency") is not None else None,
            "billing_frequency": obj.get("billing_frequency"),
            "creation_date": obj.get("creation_date"),
            "time_zone": obj.get("time_zone"),
            "stripe_customer_id": obj.get("stripe_customer_id"),
            "campaign": obj.get("campaign"),
            "is_referred": obj.get("is_referred"),
            "credit_usage": obj.get("credit_usage"),
            "credit_quota": obj.get("credit_quota"),
            "credit_package": obj.get("credit_package"),
            "email_tracking_subdomain": obj.get("email_tracking_subdomain"),
            "email_tracking_domain": GetMe200ResponseTeamEmailTrackingDomain.from_dict(obj["email_tracking_domain"]) if obj.get("email_tracking_domain") is not None else None,
            "automated_tagging": obj.get("automated_tagging"),
            "domain": obj.get("domain")
        })
        return _obj


